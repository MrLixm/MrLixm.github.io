<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liam Collod Website</title><link href="https://mrlixm.github.io/" rel="alternate"></link><link href="https://mrlixm.github.io/feeds/all.atom.xml" rel="self"></link><id>https://mrlixm.github.io/</id><updated>2022-03-30T20:58:00+02:00</updated><entry><title>Instancing in Katana</title><link href="https://mrlixm.github.io/blog/katana_instancing/" rel="alternate"></link><published>2022-03-30T20:58:00+02:00</published><updated>2022-03-30T20:58:00+02:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2022-03-30:/blog/katana_instancing/</id><summary type="html">&lt;p&gt;How OpScript can be used to create a flexible solution for
instancing.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Katana, as usual, doesn‚Äôt offer a ‚Äúready to go‚Äù solution for instancing.
This initial complexity can be overcome by the fact that we can create an
instancing solution that exactly suits our needs. And that is what we
are going to address in this post.
Additionally, I will explain how I tried to create a flexible solution for
instancing called &lt;code&gt;KUI&lt;/code&gt; so you don‚Äôt have to !&lt;/p&gt;
&lt;nav id="contents"&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro" id="id1"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instancing-methods" id="id2"&gt;Instancing Methods&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#leaf-level" id="id3"&gt;Leaf-level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hierarchical" id="id4"&gt;Hierarchical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#array" id="id5"&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#instancing-in-practice" id="id6"&gt;Instancing in Practice&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#scene-preparation" id="id7"&gt;Scene-Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#opscript-preparation" id="id8"&gt;OpScript-Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-instancing-hierarchical" id="id9"&gt;Basic Instancing : Hierarchical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-instancing-array" id="id10"&gt;Basic Instancing : Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-instancing" id="id11"&gt;Full Instancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-instancing-hierarchical" id="id12"&gt;Full Instancing : Hierarchical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-instancing-array" id="id13"&gt;Full Instancing : Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced-workflows" id="id14"&gt;Advanced workflows&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#time-samples-and-motion-blur" id="id15"&gt;Time samples and Motion-blur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instances-preview-in-the-viewer" id="id16"&gt;Instances preview in the Viewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-point-clouds-transforms" id="id17"&gt;Modifying point-clouds | Transforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-point-clouds-culling" id="id18"&gt;Modifying point-clouds | Culling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#katana-uber-instancing" id="id19"&gt;Katana Uber Instancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#render-engines" id="id20"&gt;Render-Engines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#redshift" id="id21"&gt;Redshift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#outro" id="id22"&gt;Outro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-warning"&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;My explanations reflect the experience I had with this subject and may
not be accurate in other production contexts. Be sure to contact me
if you spot big mistakes /  things to improve.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;Target-Audience&lt;/h3&gt;
&lt;p&gt;
This post is targeted towards beginners with Kanata itself.&lt;br /&gt;
If you are a more advanced user you can check &lt;a href="#katana-uber-instancing"&gt;Katana Uber Instancing&lt;/a&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;section id="intro"&gt;
&lt;h2&gt;&lt;a href="#id1"&gt;Intro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As Katana‚Äôs motto states : &lt;em&gt;It‚Äôs all just a bunch of Attributes.&lt;/em&gt; And it
applies to instances too. They are just a bunch of locations with a defined
list of attributes understood by your render-engine.
You can as such create an instance with a simple
&lt;code&gt;LocationCreate + AttributeSet&lt;/code&gt; setup &lt;em&gt;(if you have time to lose)&lt;/em&gt;. But we
will be using OpScripts to do so.&lt;/p&gt;
&lt;p&gt;Here is a quick diagram that could resume how an instance is built :&lt;/p&gt;
&lt;img alt="instancing principle" class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/intro.png" /&gt;
&lt;p&gt;The basic principle is that an &lt;code&gt;instance&lt;/code&gt; links at least to one
&lt;code&gt;instance source&lt;/code&gt; (a scene-graph location).
The instance will create a ‚Äúcopy‚Äù of this instance source. You can then set
transformations override that will allow the instance to have a different
position, rotation, etc, than the source.
Additional attributes can also be set and used for shading to make the
instance even more different than the source.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="instancing-methods"&gt;
&lt;h2&gt;&lt;a href="#id2"&gt;Instancing Methods&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Instancing comes in different flavors, that, similarly to all things, have
specific ups and downs. Your render-engine may also supply alternative ways to
produce instances so be sure to check its documentation on the topic.&lt;/p&gt;
&lt;p&gt;Here is what the Katana documentation say about this:&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://support.foundry.com/hc/en-us/articles/360006999219"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://www.foundry.com/sites/default/files/2021-12/Katana%205.0%20Webpage%20Header%20-%201920x500.jpg" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Q100518: Instancing Overview&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://support.foundry.com/hc/en-us/articles/360006999219"&gt;https://support.foundry.com/hc/en-us/articles/360006999219&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section id="leaf-level"&gt;
&lt;h3&gt;&lt;a href="#id3"&gt;Leaf-level&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(Never used this one)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://support.foundry.com/hc/en-us/articles/360006999259"&gt;The Katana documentation&lt;/a&gt; is pretty explicit.&lt;/p&gt;
&lt;div class="m-row"&gt;
&lt;div class="m-col-s-6"&gt;
&lt;aside class="m-block m-danger"&gt;
&lt;h3&gt;cons&lt;/h3&gt;
&lt;p&gt;Major drawback is that you can‚Äôt have a location with children
locations (to verify),
and well it seems every render-engine has a way to decide which
location is the first one to instance üôÇ.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/div&gt;
&lt;div class="m-col-s-6"&gt;
&lt;aside class="m-block m-success"&gt;
&lt;h3&gt;pros&lt;/h3&gt;
&lt;p&gt;You just have to set a single attribute.&lt;/p&gt;
&lt;p&gt;You can easily apply modification on a single instance.
&lt;em&gt;(ex: a Transform3D)&lt;/em&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Would love to know in what case this one can be more pertinent than the other methods.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hierarchical"&gt;
&lt;h3&gt;&lt;a href="#id4"&gt;Hierarchical&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Each instance = one scene-graph location.&lt;/p&gt;
&lt;div class="m-row"&gt;
&lt;div class="m-col-s-6"&gt;
&lt;aside class="m-block m-danger"&gt;
&lt;h3&gt;cons&lt;/h3&gt;
&lt;p&gt;Too many instances (&amp;gt;~250 000) will lead you to performances
issues. (pre-render)&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/div&gt;
&lt;div class="m-col-s-6"&gt;
&lt;aside class="m-block m-success"&gt;
&lt;h3&gt;pros&lt;/h3&gt;
&lt;p&gt;You can easily apply modification on a single instance.
&lt;em&gt;(ex: a Transform3D)&lt;/em&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="array"&gt;
&lt;h3&gt;&lt;a href="#id5"&gt;Array&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One single scene-graph location where each instance correspond to an index
on each attribute.&lt;/p&gt;
&lt;div class="m-row"&gt;
&lt;div class="m-col-s-6"&gt;
&lt;aside class="m-block m-danger"&gt;
&lt;h3&gt;cons&lt;/h3&gt;
&lt;p&gt;Complicated to get per-instance override.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/div&gt;
&lt;div class="m-col-s-6"&gt;
&lt;aside class="m-block m-success"&gt;
&lt;h3&gt;pros&lt;/h3&gt;
&lt;p&gt;Better performances.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;p&gt;And there is probably some additional pro/cons inherent to your render-engine
so again, check the documentation, and test stuff.
(For example, when I started to explore instancing, Redshift was not supporting
locations with children when using the &lt;code&gt;array&lt;/code&gt; method (not the case
anymore).)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="instancing-in-practice"&gt;
&lt;h2&gt;&lt;a href="#id6"&gt;Instancing in Practice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start, there is a nice small example on the &lt;a href="https://learn.foundry.com/katana/Content/ug/instancing/rendering_instances.html"&gt;official Katana documentation&lt;/a&gt;
. It explains how to create instances using mostly Katana nodes and one small
OpScript to avoid stacking numerous &lt;code&gt;AttributeSet&lt;/code&gt; nodes.
This approach is pretty basic: we manually set how many instances we want to
create and we need to manually move them. The setup also
takes time to build and is not very scalable.&lt;/p&gt;
&lt;p&gt;A more widely used solution depends on &lt;code&gt;point-clouds&lt;/code&gt;: a type of location
composed of visual abstract ‚Äúpoints‚Äù in the 3d space that can hold an
arbitrary number of attributes based on the point index.&lt;/p&gt;
&lt;p&gt;You use each individual point‚Äôs attribute to create an instance. For example,
each point can specify what kind of instance source it is representing, ‚Ä¶
Furthermore, its ‚Äúabstract‚Äù aspect makes it very convenient for transferring
data between DCCs.&lt;/p&gt;
&lt;p&gt;A convenient way to create scene graph locations based on a source object like
a point-cloud, is to use the &lt;a href="https://learn.foundry.com/katana/Content/ug/working_with_attributes/opscript_nodes.html"&gt;OpScript&lt;/a&gt; feature. It is an entry door to use scripting while
staying in the Katana nodegraph system. Usage of OpScript require to learn
the &lt;a href="https://en.wikipedia.org/wiki/Lua_(programming_language)"&gt;lua language&lt;/a&gt;
. But don‚Äôt worry, if you don‚Äôt want to get your hands dirty you will be able
to use a premade script/node shared in the &lt;a href="#katana-uber-instancing"&gt;Katana Uber Instancing&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;To create scene graph locations we need to know how they must be structured.
For this what‚Äôs better than having a look at the documentation :
&lt;a href="https://learn.foundry.com/katana/4.5/dev-guide/AttributeConventions/Instancing.html"&gt;AttributesConventions/Instancing&lt;/a&gt;. You notice that we
find the 3 instancing methods described again.&lt;/p&gt;
&lt;p&gt;Let‚Äôs now start building the scene.&lt;/p&gt;
&lt;section id="scene-preparation"&gt;
&lt;h3&gt;&lt;a href="#id7"&gt;Scene-Preparation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For you to follow the tutorial, I will be providing you a few assets. Actually
only a point-cloud, as to keep it simple, instances sources will be
primitives.&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://mega.nz/folder/uooQzJJR#5aguo_c3gLXPrkEnN62ZBg"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg role="img" width="64" height="64" viewBox="0 0 24 24"
     xmlns="http://www.w3.org/2000/svg"&gt;
    &lt;title&gt;MEGA&lt;/title&gt;
    &lt;path fill="currentColor"
          d="M12 0C5.372 0 0 5.372 0 12s5.372 12 12 12 12-5.372 12-12S18.628 0 12 0zm6.23 16.244a.371.371 0 0 1-.373.372H16.29a.371.371 0 0 1-.372-.372v-4.828c0-.04-.046-.06-.08-.033l-3.32 3.32a.742.742 0 0 1-1.043 0l-3.32-3.32c-.027-.027-.08-.007-.08.033v4.828a.371.371 0 0 1-.372.372H6.136a.371.371 0 0 1-.372-.372V7.757c0-.206.166-.372.372-.372h1.076a.75.75 0 0 1 .525.22l4.13 4.13a.18.18 0 0 0 .26 0l4.13-4.13c.14-.14.325-.22.525-.22h1.075c.206 0 .372.166.372.372z"/&gt;
&lt;/svg&gt;&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Sources Files Download&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://mega.nz/folder/uooQzJJR#5aguo_c3gLXPrkEnN62ZBg"&gt;https://mega.nz/folder/uooQzJJR#5aguo_c3gLXPrkEnN62ZBg&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;15KB folder on mega.nz&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also download the &lt;a href="https://github.com/MrLixm/KUI/tree/main/dev/data/alembics"&gt;pointcloud used in KUI&lt;/a&gt; for testing.&lt;/p&gt;
&lt;p&gt;This point-cloud has been generated from Mash (see &lt;a href="https://github.com/MrLixm/Autodesk_Maya/tree/main/src/mash2pointcloud"&gt;mash2pointcloud&lt;/a&gt;)
and contains the most commonly used attributes.&lt;/p&gt;
&lt;p&gt;Here is what it looked like in Maya :&lt;/p&gt;
&lt;div class="m-imagegrid m-container-inflate"&gt;
&lt;div&gt;
&lt;figure style="width: 38.560%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0005/demo-maya-01.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0005/demo-maya-01.png" /&gt;&lt;div&gt;
&lt;/div&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 61.440%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0005/demo-maya-02.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0005/demo-maya-02.png" /&gt;&lt;div&gt;
&lt;/div&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And here is the instances-sources mapping list :&lt;/p&gt;
&lt;pre class="m-code"&gt;0: cube
1: cone
2: sphere&lt;/pre&gt;
&lt;p&gt;Here it is imported in Katana :&lt;/p&gt;
&lt;img alt="Katana Interface screenshot." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-01.png" /&gt;
&lt;p&gt;I also used a small OpScript that allow me to set the viewer size of the
points. You can &lt;a href="https://github.com/MrLixm/Foundry_Katana/tree/main/src/viewer/PointcloudWidth"&gt;grab the OpScript here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Attributes&lt;/code&gt; tab we can see what are the attributes stored on the
point-cloud. This one has :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;arbitrary&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale&lt;/code&gt; : XYZ per-point scale attribute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotation&lt;/code&gt;: XYZ per-point rotation attribute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objectIndex&lt;/code&gt;: per-point index to use for instance-source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;colorRandom&lt;/code&gt;: per-point random color&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;point&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; : XYZ per-point transform&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; : per-point velocity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; : added via the OpScript for viewer size.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the attributes in the &lt;code&gt;arbitrary&lt;/code&gt; section don‚Äôt have a naming
convention. You must know which name corresponds to which type of data for when
you are creating the OpScript that produce the instances.&lt;/p&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;PointCloud Instancing without OpScript&lt;/h3&gt;
&lt;p&gt;Depending on your render-engine , it might actually support directly
rendering the point-cloud and generating the instances on the fly !
Like Arnold does &lt;a href="https://docs.arnoldrenderer.com/display/A5KTN/pointcloud+and+instance+array"&gt;as explained here&lt;/a&gt;. But it excepts
specific attributes in the &lt;code&gt;point&lt;/code&gt; group.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;For the instance-sources we will be using simple primitives as detailed above.
You can use &lt;code&gt;PrimitiveCreate&lt;/code&gt; node to create them. My final ‚Äúinitial‚Äù
nodegraph is looking like this :&lt;/p&gt;
&lt;img alt="Katana Interface screenshot." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-02.png" /&gt;
&lt;p&gt;Now it‚Äôs time to have a look at OpScripting.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="opscript-preparation"&gt;
&lt;h3&gt;&lt;a href="#id8"&gt;OpScript-Preparation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We are going to manipulate a lot of inputs and data and at some point, we
will need to see what X variable is equal to, what is the result of X
operation, etc
to just be able to know where we need to go scripting-wise. Usually, this is
done by using the &lt;code&gt;print()&lt;/code&gt; function. But this is very basic and can lead to
various limitations.&lt;/p&gt;
&lt;p&gt;To have a more robust way of debugging OpScripts I made myself a small
logging module in lua. Kind of similar to what Python logging module does.
It adds a bunch of line to your script but will allow more flexibility in the
way data will be displayed to you.&lt;/p&gt;
&lt;p&gt;Have a look at this repository to install the llloger module :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://github.com/MrLixm/llloger"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://raw.githubusercontent.com/MrLixm/llloger/main/doc/img/thumbnail.jpg" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;llloger.lua&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://github.com/MrLixm/llloger"&gt;https://github.com/MrLixm/llloger&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;A simple lua logging module based on Python one.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All instructions are specified in the &lt;a href="https://github.com/MrLixm/llloger/blob/main/doc/INDEX.md"&gt;documentation&lt;/a&gt; so I have not much to explain
here.&lt;/p&gt;
&lt;p&gt;We will then be able to use the logger methods to output messages to the
console. &lt;em&gt;(This just wrap the ‚Äúprint()‚Äú function which in Katana, output the
result in the console that should be opened alongside your Katana)&lt;/em&gt;&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;any object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;any object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;any object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;any object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;All these steps &lt;strong&gt;are not mandatory&lt;/strong&gt; for this tutorial. They just help for
faster debugging. &lt;em&gt;(And pertinent if you want to write lua code by yourself.)&lt;/em&gt;
Though, the &lt;code&gt;llloger&lt;/code&gt; module is required for &lt;code&gt;KUI&lt;/code&gt; to work, so if you plan
to use it, you will need to install it anyways.&lt;/p&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;p&gt;And by the way, if this is your first time with OpScript, the documentation
can be a bit confusing at first. It is split into multiple ‚Äúmodules‚Äù with
different language bindings. The one we use the most often is the
CookInterface :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://learn.foundry.com/katana/4.5/dev-guide/OpsAndOpScript/CookInterface/OpScript.html"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" height="60" viewBox="0 0 490 490" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path fill-rule="evenodd" clip-rule="evenodd" d="M245 490C380.31 490 490 380.31 490 245C490 109.69 380.31 0 245 0C109.69 0 0 109.69 0 245C0 380.31 109.69 490 245 490ZM245 466C367.055 466 466 367.055 466 245C466 122.945 367.055 24 245 24C122.945 24 24 122.945 24 245C24 367.055 122.945 466 245 466Z" fill="currentColor"/&gt;
&lt;path d="M335.174 313.737C335.72 308.9 336 303.983 336 299C336 227.203 277.797 169 206 169C134.203 169 76 227.203 76 299C76 352.522 108.344 398.49 154.553 418.423C126.898 397.723 109 364.702 109 327.5C109 264.816 159.816 214 222.5 214C280.526 214 328.381 257.543 335.174 313.737Z" fill="currentColor"/&gt;
&lt;path d="M141.339 288.419C145.255 291.31 149.373 294.011 153.688 296.502C215.866 332.401 295.373 311.097 331.271 248.919C367.17 186.741 345.866 107.234 283.688 71.3359C237.337 44.5749 181.356 49.602 140.989 79.6531C172.743 66.0533 210.289 67.0639 242.506 85.6647C296.793 117.007 315.392 186.422 284.05 240.709C255.037 290.96 193.4 310.633 141.339 288.419Z" fill="currentColor"/&gt;
&lt;path d="M258.759 133.059C254.297 135.004 249.898 137.22 245.583 139.712C183.405 175.61 162.102 255.117 198 317.295C233.899 379.473 313.405 400.777 375.583 364.878C421.935 338.117 445.572 287.122 439.73 237.138C435.631 271.438 415.983 303.448 383.765 322.049C329.479 353.391 260.063 334.792 228.721 280.505C199.708 230.254 213.49 167.038 258.759 133.059Z" fill="currentColor"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Cook Interface (OpScript).&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://learn.foundry.com/katana/4.5/dev-guide/OpsAndOpScript/CookInterface/OpScript.html"&gt;https://learn.foundry.com/katana/4.5/dev-guide/OpsAndOpScript/CookInterface/OpScript.html&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="basic-instancing-hierarchical"&gt;
&lt;h3&gt;&lt;a href="#id9"&gt;Basic Instancing : Hierarchical&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a first try, we will be using the OpScript provided on the Foundry‚Äôs
documentation. It‚Äôs the most basic you can do which will be perfect for an
introduction. It‚Äôs the one for the hierarchical method.&lt;/p&gt;
&lt;p&gt;Create an OpScript node and paste the bottom script inside the &lt;code&gt;script.lua&lt;/code&gt;
parameter&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cm"&gt;--[[&lt;/span&gt;
&lt;span class="cm"&gt;source: https://support.foundry.com/hc/en-us/articles/360006999279&lt;/span&gt;
&lt;span class="cm"&gt;]]&lt;/span&gt;

&lt;span class="c1"&gt;-- Read op arguments&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;instanceSourceLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.instanceSourceLocation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pointCloudLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.pointCloudLocation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AtRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
  &lt;span class="c1"&gt;-- Read the point cloud&lt;/span&gt;
  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geometry.point.P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pointCloudLocation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;-- ignore the other samples so no motion blur !&lt;/span&gt;
  &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNearestSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;-- Loop over points&lt;/span&gt;
  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;gb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GroupBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

      &lt;span class="c1"&gt;-- Build op arguments for the child location&lt;/span&gt;
      &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instanceSourceLocation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;instance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.geometry.instanceSource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instanceSourceLocation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c1"&gt;-- note: we shouldn&amp;#39;t use `xform.interactive` as originaly specified.&lt;/span&gt;
      &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.xform.group0.translate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DoubleAttribute&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

      &lt;span class="c1"&gt;-- Create the child&lt;/span&gt;
      &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nb"&gt;string.format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;child%04d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
          &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="kr"&gt;else&lt;/span&gt;

  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;childAttrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;childAttrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNumberOfChildren&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;childAttrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getChildName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;childAttrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getChildByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="kr"&gt;end&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;If you look at the first lines you can see that we are getting some
&lt;code&gt;OpArg&lt;/code&gt; values. On OpScript nodes this corresponds to &lt;code&gt;user&lt;/code&gt; parameters.
This means we will need to create two of them.&lt;/p&gt;
&lt;img alt="Katana Interface screenshot: OpScript parameters." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-03.png" /&gt;
&lt;p&gt;You should have noticed the first script‚Äôs limitation, we can only give one
instance-source for now. But let‚Äôs keep that for later. Set the 2 created user
parameters values with their corresponding locations. &lt;em&gt;(! the pointcloud is the
location of type&lt;/em&gt; &lt;code&gt;pointcloud&lt;/code&gt; &lt;em&gt;, not its parent ‚Äúgroup‚Äù.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
We need to provide one
last input, the target destination for our instances. For this, change the
&lt;code&gt;applyWhere&lt;/code&gt; parameter to &lt;code&gt;atSpecificLocation&lt;/code&gt; and then in the
&lt;code&gt;location&lt;/code&gt; param at the top,
submit the desired target location for your instances.&lt;br /&gt;
I will be using &lt;code&gt;/root/world/geo/instancing/demo&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Now let‚Äôs view the OpScript node, and expand the target location in the
SceneGraph to see our instances.&lt;/p&gt;
&lt;img alt="Katana Interface screenshot:SceneGraph instances." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-04.png" /&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;Instances preview in the Viewer&lt;/h3&gt;
&lt;p&gt;Since &lt;strong&gt;Katana 4.5&lt;/strong&gt;, it is now possible to view instances in the Viewer.
Have a look at the &lt;a href="#instances-preview-in-the-viewer"&gt;Instances preview in the Viewer&lt;/a&gt; section.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;Yay, that was quick to have something working. But check the Attributes on one
of the instance.&lt;/p&gt;
&lt;img alt="Katana Interface screenshot: Instance Attributes." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-05.png" style="width: 480px" /&gt;
&lt;p&gt;If you have a look at the &lt;code&gt;xform.interactive&lt;/code&gt; attributes, we can see that
only the &lt;code&gt;translate&lt;/code&gt; attribute has non-default values. This is because our
current OpScript only read the &lt;code&gt;P&lt;/code&gt; attribute on the point-cloud which
correspond to the instance translations.&lt;/p&gt;
&lt;p&gt;
You can notice that all the &lt;code&gt;geometry&lt;/code&gt; attributes from the instance-source
have also been copied. This is because the script copies all the root
attributes of the instance-source :&lt;br /&gt;
&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="n"&gt;gb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instanceSourceLocation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This would allow having the bounds attribute on the instance, so we have at
least some primitive representation in the viewer. But the &lt;code&gt;geometry&lt;/code&gt;
attributes are not needed because they are copied from the instance-source
at render-time. To fix this, the instance-source location would need to be a
group with the mesh inside.&lt;/p&gt;
&lt;p&gt;Now, what we should not forget, is cleaning the scene for rendering. This
means :&lt;/p&gt;
&lt;p&gt;
1. Hide the pointcloud (cause you render-engine will probably render the
points as spheres).&lt;br /&gt;
You can use a &lt;code&gt;VisibilityAssign&lt;/code&gt; node for this.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
2. Hide the instances-sources.&lt;br /&gt;
This can be graciously done by setting the type of the instance-source
location to &lt;code&gt;instance source&lt;/code&gt;.&lt;br /&gt;
You can use an &lt;code&gt;AttributeSet&lt;/code&gt; node for this.&lt;br /&gt;
&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
Setting a location type to &lt;code&gt;instance source&lt;/code&gt; will make it invisible in
the viewer, in the render and allow to preview the instances in the viewer
(with Katana &amp;gt;= 4.5).&lt;/aside&gt;
&lt;/aside&gt;
&lt;img alt="Katana Interface screenshot: AttributeSet node." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-06.png" /&gt;
&lt;p&gt;Annnnd, we can try to fire up a render to see our instancing result.
Nothing very exciting, using primitives doesn‚Äôt look very impressive. You
can have a try with any asset, just instance it‚Äôs top-most location. Here is
the result with a ‚Äúheavy‚Äù asset :&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="Katana Viewer GIF: rendering house instances." src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-07.gif" /&gt;
&lt;figcaption&gt;100 x 3.2 mi vertices house asset, 1920x1080, 3Delight&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And if you need it, here is the Katana file :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://mrlixm.github.io/static/blog/0005/demo.hierarchical.basic.katana"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" height="60" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path fill-rule="evenodd" clip-rule="evenodd" d="M52.5832 22.5H35.1665V5.08334L52.5832 22.5ZM38.3332 0.333336H12.9998C9.48484 0.333336 6.6665 3.15167 6.6665 6.66667V57.3333C6.6665 60.8167 9.48484 63.6667 12.9998 63.6667H50.9998C52.6795 63.6667 54.2904 62.9994 55.4782 61.8117C56.6659 60.624 57.3332 59.013 57.3332 57.3333V19.3333L38.3332 0.333336ZM48 44C48 52.8366 40.8366 60 32 60C23.1634 60 16 52.8366 16 44C16 35.1634 23.1634 28 32 28C40.8366 28 48 35.1634 48 44ZM46.4327 44C46.4327 51.9709 39.9709 58.4327 32 58.4327C24.0291 58.4327 17.5673 51.9709 17.5673 44C17.5673 36.0291 24.0291 29.5673 32 29.5673C39.9709 29.5673 46.4327 36.0291 46.4327 44ZM26.0368 47.3634C25.755 47.2007 25.4861 47.0243 25.2304 46.8355C26.2296 47.2619 27.2829 47.452 28.3203 47.4245C27.7094 45.7806 27.6402 44.0292 28.0511 42.4004C25.1769 43.4205 23.1185 46.1637 23.1185 49.3878C23.1185 51.8173 24.2873 53.9737 26.0934 55.3256C23.0756 54.0238 20.9634 51.0218 20.9634 47.5265C20.9634 42.8377 24.7644 39.0367 29.4532 39.0367C29.5551 39.0367 29.6565 39.0385 29.7575 39.0421C30.3811 38.2932 31.1451 37.6397 32.0383 37.1241C32.3201 36.9613 32.6074 36.8166 32.8987 36.6896C32.0068 37.3591 31.3021 38.2023 30.8047 39.1437C32.5811 39.4279 34.1736 40.2632 35.4012 41.4686C36.0082 38.4372 34.6631 35.2259 31.8372 33.5944C29.7332 32.3797 27.2812 32.3137 25.2075 33.2018C27.8437 31.2393 31.4996 30.911 34.5266 32.6587C38.5872 35.003 39.9785 40.1953 37.6341 44.2559C37.5667 44.3727 37.4969 44.4872 37.4249 44.5995C37.76 45.512 37.943 46.4979 37.943 47.5265C37.943 47.852 37.9247 48.1731 37.889 48.4889C37.7549 47.3798 37.3759 46.3461 36.8076 45.4436C35.6655 46.8189 34.1457 47.7622 32.4919 48.2081C34.8134 50.2265 38.249 50.6561 41.0624 49.0318C43.1664 47.817 44.4496 45.7266 44.7173 43.4866C45.0988 46.7508 43.5551 50.0811 40.5281 51.8288C36.4675 54.1732 31.2752 52.7819 28.9308 48.7213C28.862 48.6021 28.7964 48.4819 28.734 48.3609C27.8094 48.1895 26.8977 47.8604 26.0368 47.3634ZM34.5503 43.7198C33.7487 45.1081 32.5658 46.139 31.2103 46.7566C31.115 46.6149 31.0238 46.4689 30.9371 46.3187C30.1515 44.958 29.8463 43.4518 29.969 41.9965C30.1544 41.9826 30.3418 41.9755 30.5307 41.9755C32.1078 41.9755 33.5699 42.468 34.7714 43.3077C34.7025 43.4464 34.6288 43.5838 34.5503 43.7198Z" fill="currentColor"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Download sources files.&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://mrlixm.github.io/static/blog/0005/demo.hierarchical.basic.katana"&gt;{static}/blog/0005/demo.hierarchical.basic.katana&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="basic-instancing-array"&gt;
&lt;h3&gt;&lt;a href="#id10"&gt;Basic Instancing : Array&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before trying to go further with hierarchical we are going to have a look at
the &lt;code&gt;array&lt;/code&gt; method. Keep the same scene, we will only need to change the
OpScript.&lt;/p&gt;
&lt;p&gt;And here it is. It‚Äôs a slightly modified version from the one on
Foundry‚Äôs website. (better readability + bugs fixed)&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="cm"&gt;--[[&lt;/span&gt;
&lt;span class="cm"&gt;source: https://support.foundry.com/hc/en-us/articles/360006999239&lt;/span&gt;
&lt;span class="cm"&gt;]]&lt;/span&gt;

&lt;span class="c1"&gt;-- Read the op arguments&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;instanceSourceLocations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.instanceSourceLocations&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pointCloudLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.pointCloudLocation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;-- Read the point cloud&amp;#39;s points&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pointAttr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geometry.point.P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pointCloudLocation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointAttr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNearestSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetCurrentTime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="c1"&gt;-- declare variable used to build the final instance&lt;/span&gt;
&lt;span class="c1"&gt;-- The indexArray attribute determines which instance source each instance location represents&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;indexArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;matrixArrayMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="cm"&gt;--[[---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="cm"&gt;  PROCESS instance source attribute&lt;/span&gt;

&lt;span class="cm"&gt;]]&lt;/span&gt;


&lt;span class="c1"&gt;-- for each instance create an instance index&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;-- For this example, the instances are arbitrarily assigned to an&lt;/span&gt;
  &lt;span class="c1"&gt;-- instance source&lt;/span&gt;
  &lt;span class="c1"&gt;-- a more stable apporach would be to use an arbitrary attribute&lt;/span&gt;
  &lt;span class="c1"&gt;-- on the point cloud to assign an instance source&lt;/span&gt;
  &lt;span class="n"&gt;indexArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;indexArray&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;instanceSourceLocations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNumberOfTuples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;


&lt;span class="cm"&gt;--[[---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="cm"&gt;  PROCESS MATRIX ATTRIBUTE&lt;/span&gt;

&lt;span class="cm"&gt;]]&lt;/span&gt;
&lt;span class="c1"&gt;-- Get the transforms from the points&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;numTimeSamples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointAttr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNumberOfTimeSamples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;matrixArray&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;workMatrix&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;sampleTime&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pointSample&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;span class="c1"&gt;-- to get motion blur on the instances, create an instanceMatrix at each&lt;/span&gt;
&lt;span class="c1"&gt;-- time sample available from the point cloud points attribute&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;numTimeSamples&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;sampleTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointAttr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getSampleTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pointSample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointAttr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNearestSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;-- each instance in array has its own matrix&lt;/span&gt;
  &lt;span class="n"&gt;matrixArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;workMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Imath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M44d&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="n"&gt;toTable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;-- for each instance build a matrix with a mocked up transformation&lt;/span&gt;
  &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;pointSample&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;-- grab the points that represent this instance&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointSample&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointSample&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pointSample&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;-- set the translate of the matrix to the points in the point cloud&lt;/span&gt;
    &lt;span class="n"&gt;workMatrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="n"&gt;workMatrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="n"&gt;workMatrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;

    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;matrixArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;matrixArray&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;workMatrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kr"&gt;end&lt;/span&gt;

  &lt;span class="kr"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;matrixArrayMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sampleTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matrixArray&lt;/span&gt;

&lt;span class="kr"&gt;end&lt;/span&gt;


&lt;span class="cm"&gt;--[[---------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="cm"&gt; Build the array instance&lt;/span&gt;

&lt;span class="cm"&gt;]]&lt;/span&gt;
&lt;span class="c1"&gt;-- Create a single location which will generate an array of instances&lt;/span&gt;
&lt;span class="c1"&gt;-- Set type for this location to &amp;#39;instance array&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instance array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;-- This instance array location must point to the instance source locations&lt;/span&gt;
&lt;span class="c1"&gt;-- through the attribute &amp;#39;geometry.instanceSource&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry.instanceSource&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instanceSourceLocations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;-- Set index for instance array element&lt;/span&gt;
&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry.instanceIndex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry.instanceMatrix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DoubleAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matrixArrayMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You still need to create 2 &lt;code&gt;user&lt;/code&gt; parameters on the OpScript node, but
this time &lt;code&gt;user.instancesSourceLocations&lt;/code&gt; must be a string array of scene
graph-locations.&lt;/p&gt;
&lt;img alt="Katana Interface screenshot: OpScript user paramaters." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-08.gif" /&gt;
&lt;p&gt;And of course the same &lt;code&gt;user.pointCloudLocation&lt;/code&gt; one. The &lt;code&gt;location&lt;/code&gt;
parameter still define where the instance is created but this time it‚Äôs not
the group holding the instances, but directly the full location of the instance
(array instance is only one scene-graph location).&lt;/p&gt;
&lt;p&gt;Make sure the OpScript is running and then check the attribute on the
&lt;code&gt;instance array&lt;/code&gt; location created.&lt;/p&gt;
&lt;img alt="Katana Interface screenshot: Instance Array Attributes." class="m-image" src="https://mrlixm.github.io/static/images/blog/0005/demo-katana-09.png" /&gt;
&lt;p&gt;This time we can use our different instance-sources thanks to the
&lt;code&gt;InstanceIndex&lt;/code&gt; attribute that specify which instance-source to use per
point. But if we look more closely at the OpScript lua script, we notice the
index are generated mathematically instead of using our point-cloud‚Äôs
&lt;code&gt;objectIndex&lt;/code&gt; attribute. This will need to be addressed later of course.&lt;/p&gt;
&lt;p&gt;We can also notice that we are not using the traditional ‚Äútranslate‚Äù attribute,
but a matrix one. Matrices have the advantages of replacing 5 attributes
with 1 (translations, rotations(X, Y, Z), scale) but are harder to modify
‚Äúon-the-fly‚Äù. In the end choose what suits you best for your workflow.&lt;/p&gt;
&lt;p&gt;To know what kind of attributes are supposed to be supported by each
instancing method, we can have a look at the documentation:&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://learn.foundry.com/katana/4.5/dev-guide/AttributeConventions/Instancing.html"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" height="60" viewBox="0 0 490 490" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path fill-rule="evenodd" clip-rule="evenodd" d="M245 490C380.31 490 490 380.31 490 245C490 109.69 380.31 0 245 0C109.69 0 0 109.69 0 245C0 380.31 109.69 490 245 490ZM245 466C367.055 466 466 367.055 466 245C466 122.945 367.055 24 245 24C122.945 24 24 122.945 24 245C24 367.055 122.945 466 245 466Z" fill="currentColor"/&gt;
&lt;path d="M335.174 313.737C335.72 308.9 336 303.983 336 299C336 227.203 277.797 169 206 169C134.203 169 76 227.203 76 299C76 352.522 108.344 398.49 154.553 418.423C126.898 397.723 109 364.702 109 327.5C109 264.816 159.816 214 222.5 214C280.526 214 328.381 257.543 335.174 313.737Z" fill="currentColor"/&gt;
&lt;path d="M141.339 288.419C145.255 291.31 149.373 294.011 153.688 296.502C215.866 332.401 295.373 311.097 331.271 248.919C367.17 186.741 345.866 107.234 283.688 71.3359C237.337 44.5749 181.356 49.602 140.989 79.6531C172.743 66.0533 210.289 67.0639 242.506 85.6647C296.793 117.007 315.392 186.422 284.05 240.709C255.037 290.96 193.4 310.633 141.339 288.419Z" fill="currentColor"/&gt;
&lt;path d="M258.759 133.059C254.297 135.004 249.898 137.22 245.583 139.712C183.405 175.61 162.102 255.117 198 317.295C233.899 379.473 313.405 400.777 375.583 364.878C421.935 338.117 445.572 287.122 439.73 237.138C435.631 271.438 415.983 303.448 383.765 322.049C329.479 353.391 260.063 334.792 228.721 280.505C199.708 230.254 213.49 167.038 258.759 133.059Z" fill="currentColor"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Instancing ‚Äì Katana Developer Guide&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://learn.foundry.com/katana/4.5/dev-guide/AttributeConventions/Instancing.html"&gt;https://learn.foundry.com/katana/4.5/dev-guide/AttributeConventions/Instancing.html&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Only the Array method require specific attributes as all instances are
represented by one scene-graph location.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="full-instancing"&gt;
&lt;h3&gt;&lt;a href="#id11"&gt;Full Instancing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Aight‚Äô that was a quick first look at instancing, but as mentioned, we were
not using all the exported attributes on our point-cloud. Supporting them
requires extending the basics OpScripts we used but this will be too long
for this blog-post. Instead, I‚Äôm just going to give the code logic you could
be using if you want to go down that road. Else you will find a fully working
solution in the &lt;a href="#katana-uber-instancing"&gt;Katana Uber Instancing&lt;/a&gt; section üòâ.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="full-instancing-hierarchical"&gt;
&lt;h3&gt;&lt;a href="#id12"&gt;Full Instancing : Hierarchical&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hierarchical is using single location per-instance, they can use the commonly
used attributes for locations like &lt;code&gt;xform&lt;/code&gt;. This transformation attributes
are described in the docs : &lt;a href="https://learn.foundry.com/katana/4.5/dev-guide/AttributeConventions/Transformations.html"&gt;dev-guide/AttributeConventions/Transformations&lt;/a&gt;. So pretty easy to implement, in pseudo-code :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- this is &amp;quot;pseudo-code&amp;quot;, not usable as it is.&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;translate_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;rotate_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;scale_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;out_translate&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;out_rotateX&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;out_rotateY&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;out_rotateZ&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;out_scale&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;

&lt;span class="c1"&gt;-- points is divided by 3 cause it has `num point * XYZ`&lt;/span&gt;
&lt;span class="c1"&gt;-- in lua we start counting at 1 but we need the `i` to start at 0 to correctly&lt;/span&gt;
&lt;span class="c1"&gt;-- gather each point index. As we start at 0 we remove 1 to compensate.&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GroupBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;out_translate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
  &lt;span class="c1"&gt;-- as stated in the doc, rotations need to define axis orientation.&lt;/span&gt;
  &lt;span class="n"&gt;out_rotateX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rotate_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;out_rotateY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rotate_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;--[...]&lt;/span&gt;

  &lt;span class="c1"&gt;--[...]&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.xform.group0.translate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_translate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.xform.group0.rotateZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_rotateX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.xform.group0.rotateY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_rotateY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.xform.group0.rotateX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_rotateZ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;childAttrs.xform.group0.scale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_scale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;instance_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;--[...]&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In the code I wrote in the past, my target was &lt;code&gt;xform.interactive&lt;/code&gt; but
this is wrong as the xform is not interactive like with a Transform3D ! You
should use &lt;code&gt;xform.groupN&lt;/code&gt; convention instead.&lt;/p&gt;
&lt;aside class="m-note m-warning"&gt;
&lt;p&gt;&lt;code&gt;Xform&lt;/code&gt; attributes are very sensitive :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to make sure the order is respected as followed :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;translation
rotationZ
rotationY
rotationX
scale
matrix&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;You have to make sure all the above attributes are &lt;code&gt;DoubleAttributes&lt;/code&gt;. Else you might have surprises at render-time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;If you are now wondering who to determine which instanceSource to use, the
logic is pretty simple :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- this is &amp;quot;pseudo-code&amp;quot;, not usable as it is.&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;user_instance_sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;instance_index_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;out_instance_source&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;current_instance_index&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GroupBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;-- find which index the currently visited point corresponds to&lt;/span&gt;
  &lt;span class="n"&gt;current_instance_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;instance_index_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;-- The user_instance_sources had of course to be submitted in the proper&lt;/span&gt;
  &lt;span class="c1"&gt;-- order to work.&lt;/span&gt;
  &lt;span class="c1"&gt;-- (in lua, we start counting from 1, so if the above index returned start&lt;/span&gt;
  &lt;span class="c1"&gt;-- at 0, we need to add 1.)&lt;/span&gt;
  &lt;span class="n"&gt;out_instance_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_instance_sources&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_instance_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;childAttrs.geometry.instanceSource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_instance_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;--[...]&lt;/span&gt;

  &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;instance_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;--[...]&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And you could then do the same for arbitrary attributes like &lt;code&gt;colorRandom&lt;/code&gt;.
The only difference could be the target destination on the instance. You
must check your render-engine documentation for that, but usually, it‚Äôs :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- this is &amp;quot;pseudo-code&amp;quot;, not usable as it is.&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;random_color_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GroupBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;--[...]&lt;/span&gt;

  &lt;span class="n"&gt;cr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_color_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_color_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_color_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;-- not gonna lie I don&amp;#39;t really know what the scope does&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;childAttrs.geometry.arbitrary.randomColor.scope&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;primitive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;-- inputType is important ! Depends on what node you use in the shading&lt;/span&gt;
  &lt;span class="c1"&gt;-- network to get back the data. In Arnold this would be an `user_data_rgb`&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;childAttrs.geometry.arbitrary.randomColor.inputType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;color3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;childAttrs.geometry.arbitrary.randomColor.value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;FloatAttribute&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;instance_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;--[...]&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And finally just for ‚Äú‚Äùeducational‚Äù‚Äù purposes, here is the code I used on
a Redshift production. It‚Äôs not that documented and code have a lot of
mistakes so use it at your own risk. Again I recommend instead having a look at
&lt;code&gt;KUI&lt;/code&gt;.&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://mrlixm.github.io/static/blog/0005/opscript.hierarchical.liam.lua"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" height="60" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path d="M35.1665 22.5H52.5832L35.1665 5.08334V22.5ZM12.9998 0.333336H38.3332L57.3332 19.3333V57.3333C57.3332 59.013 56.6659 60.624 55.4782 61.8117C54.2904 62.9994 52.6795 63.6667 50.9998 63.6667H12.9998C9.48484 63.6667 6.6665 60.8167 6.6665 57.3333V6.66667C6.6665 3.15167 9.48484 0.333336 12.9998 0.333336ZM13.3798 43.0833L25.2232 54.9267L29.7198 50.4617L22.3415 43.0833L29.7198 35.705L25.2232 31.24L13.3798 43.0833ZM48.7198 43.0833L36.8765 31.24L32.3798 35.705L39.7582 43.0833L32.3798 50.4617L36.8765 54.9267L48.7198 43.0833Z" fill="currentColor"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;OpScript | Hierarchical | Redshift&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://mrlixm.github.io/static/blog/0005/opscript.hierarchical.liam.lua"&gt;{static}/blog/0005/opscript.hierarchical.liam.lua&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="full-instancing-array"&gt;
&lt;h3&gt;&lt;a href="#id13"&gt;Full Instancing : Array&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Array is in a way more simple, you can just brainless copy the attributes
from the point-cloud to the instance (if they are properly formatted).
Make sure to &lt;a href="https://learn.foundry.com/katana/4.5/dev-guide/AttributeConventions/Instancing.html"&gt;check the documentation&lt;/a&gt; about what kind of
attribute is expected.
Pseudo code is looking like this :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- this is &amp;quot;pseudo-code&amp;quot;, not usable as it is (actually for this one it is).&lt;/span&gt;


&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;pointCloudLocation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetOpArg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user.pointCloudLocation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;p_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;geometry.point.P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pointCloudLocation&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;-- this already return a FloatAttribute instance.&lt;/span&gt;


&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;instance array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;geometry.instanceTranslate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Yup, it is that easy if you only need translations.&lt;/p&gt;
&lt;p&gt;To add rotations, you will need to split the incoming point-cloud attribute
into X,Y and Z and add the axis direction. Works the same as for hierarchical.
And imagine you are using a matrix instead. Even less code to write.&lt;/p&gt;
&lt;aside class="m-note m-warning"&gt;
&lt;p&gt;All attributes are very sensitive to the way they are build:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to make sure the order is respected as followed :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;matrix
translation
rotationZ
rotationY
rotationX
scale&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;You have to make sure all the above attributes are &lt;code&gt;DoubleAttributes&lt;/code&gt;
(and other attributes like &lt;code&gt;instanceIndex&lt;/code&gt; also have the correct type
specified in the documentation).
Else you might have surprises at render-time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;Anyway here was the solution I used in prod, same blah blah as for
hierarchical‚Ä¶&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://mrlixm.github.io/static/blog/0005/opscript.array.liam.lua"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" height="60" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path d="M35.1665 22.5H52.5832L35.1665 5.08334V22.5ZM12.9998 0.333336H38.3332L57.3332 19.3333V57.3333C57.3332 59.013 56.6659 60.624 55.4782 61.8117C54.2904 62.9994 52.6795 63.6667 50.9998 63.6667H12.9998C9.48484 63.6667 6.6665 60.8167 6.6665 57.3333V6.66667C6.6665 3.15167 9.48484 0.333336 12.9998 0.333336ZM13.3798 43.0833L25.2232 54.9267L29.7198 50.4617L22.3415 43.0833L29.7198 35.705L25.2232 31.24L13.3798 43.0833ZM48.7198 43.0833L36.8765 31.24L32.3798 35.705L39.7582 43.0833L32.3798 50.4617L36.8765 54.9267L48.7198 43.0833Z" fill="currentColor"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;OpScript | Hierarchical | Redshift&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://mrlixm.github.io/static/blog/0005/opscript.array.liam.lua"&gt;{static}/blog/0005/opscript.array.liam.lua&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="advanced-workflows"&gt;
&lt;h2&gt;&lt;a href="#id14"&gt;Advanced workflows&lt;/a&gt;&lt;/h2&gt;
&lt;section id="time-samples-and-motion-blur"&gt;
&lt;h3&gt;&lt;a href="#id15"&gt;Time samples and Motion-blur&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An important topic that I actually only manage to understand very few time
before publishing this article. To have motion-blur working on your instances
(if there is movement), they need to store on attributes multiples samples that
correspond to the &lt;code&gt;shutterOpen/Close&lt;/code&gt; values specified in the RenderSettings.
A sample could be considered as a ‚Äúsub-frame‚Äù, so with &lt;code&gt;shutterOpen=-0.25,
shutterClose=0.25&lt;/code&gt; and the &lt;code&gt;maxTimeSamples&lt;/code&gt; set to 3 you would find 3
time samples at -0.25, 0.0, 0.25 per attribute.&lt;/p&gt;
&lt;p&gt;Example with an xform matrix attribute :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DoubleAttribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tupleSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;All the code you saw in the &lt;a href="#instancing-in-practice"&gt;Instancing In Practice&lt;/a&gt; section (except the
Basic Array one) doesn‚Äôt take account of multiple time samples and just gets
the nearest sample at 0.0. And you better know if you need to support
motion-blur before writing anything (I have to rewrite a good chunk of KUI
because of not knowing about it).&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://learn.foundry.com/katana/5.0/dev-guide/OpsAndOpScript/Attributes/OpScript.html#DataAttribute.getNearestSample"&gt;Katana Attributes documentation&lt;/a&gt;
define all the methods you can use to manipulate time samples but I found it
confusing with not a lot of examples to show how the overall picture is
working. So here is a code snippet showcasing the 2 different options to
manipulate values per time-sample :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;-- pseudo code to showcase code logic, not usable as it is&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;geometry.point.P&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="cm"&gt;--[[ --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cm"&gt;  USING TABLES&lt;/span&gt;

&lt;span class="cm"&gt;  table are a bit faster but can only go up to 2^27 (134 million) values per attribute&lt;/span&gt;

&lt;span class="cm"&gt;]]&lt;/span&gt;

&lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNumberOfTimeSamples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;smplindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;-- convert the smplindex to sampletime (shutterOpen/Close values)&lt;/span&gt;
  &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getSampleTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smplindex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getNearestSample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- table&lt;/span&gt;
  &lt;span class="c1"&gt;-- // do something with the values table&lt;/span&gt;
  &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="cm"&gt;--[[ --------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="cm"&gt;  USING ARRAYS&lt;/span&gt;

&lt;span class="cm"&gt;  arrays are a bit slower but have no limit,&lt;/span&gt;
&lt;span class="cm"&gt;  array manipulation is less convenient than tables.&lt;/span&gt;

&lt;span class="cm"&gt;]]&lt;/span&gt;

&lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getSamples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;smplindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smplindex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- get() starts at 0&lt;/span&gt;
  &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;-- Array&lt;/span&gt;
  &lt;span class="c1"&gt;-- // do something with the values Array&lt;/span&gt;
  &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getSampleTime&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="kr"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;-- new value is a table of time samples. Exemple :&lt;/span&gt;
&lt;span class="c1"&gt;-- new_value {-0.25={...}, 0.0={...}, 0.25={...}}&lt;/span&gt;
&lt;span class="c1"&gt;-- new_value {-0.25=Array, 0.0=Array, 0.25=Array}&lt;/span&gt;&lt;/pre&gt;
&lt;aside class="m-note m-info"&gt;
If you try to print the samples, you have to look at the result in the
RenderLog &lt;strong&gt;(so start a render)&lt;/strong&gt;. The nodegraph doesn‚Äôt evaluate
motion-blur in live and the result in the console will only be for time
sample 0.0.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;Of course, this adds an additional small loop to process values which increase
code complexity and could also damage performances if not optimized code is
being used.&lt;/p&gt;
&lt;p&gt;You can have a look at the lua files in My &lt;code&gt;Foundry_Katana&lt;/code&gt; GitHub repository
like &lt;a href="https://github.com/MrLixm/Foundry_Katana/blob/main/src/attributes/attrTypeSwap/attrTypeSwap.lua"&gt;attrTypeSwap.lua&lt;/a&gt;
to see more context use of time-samples.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="instances-preview-in-the-viewer"&gt;
&lt;h3&gt;&lt;a href="#id16"&gt;Instances preview in the Viewer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Since &lt;strong&gt;Katana 4.5&lt;/strong&gt;, it is now possible to view &lt;strong&gt;instance array&lt;/strong&gt; in the
Viewer :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to set instance-source location &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;instance source&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make sure the instance-sources and the instance are set to be viewed in
the Viewer (location expanded or ‚Äúeye‚Äù checked for all the instance source
hierarchy).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‚ö† Be careful though, as if your instance-sources are heavy meshes, you
might end up with an un-responsive Viewer.&lt;/p&gt;
&lt;p&gt;More details &lt;a href="https://youtu.be/VYRjWw6biEQ"&gt;in this video&lt;/a&gt;. Or in the
&lt;a href="https://learn.foundry.com/katana/Content/release_notes/whats_new_4.5.html#PreviewInstancesandRendersintheHydraViewer"&gt;Katana 4.5 patch-note&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The above also apply to &lt;em&gt;hierarchical&lt;/em&gt; even if not specified in the notes.
For Katana &amp;lt; 4.5, there is no real solution for &lt;em&gt;arrays&lt;/em&gt;, but there is one for
&lt;em&gt;hierarchical&lt;/em&gt; that make use of the &lt;code&gt;proxies.viewer&lt;/code&gt; attribute :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://learn.foundry.com/katana/4.0/Content/ug/scene_data/proxies_good_data.html"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" height="60" viewBox="0 0 490 490" fill="none" xmlns="http://www.w3.org/2000/svg"&gt;
&lt;path fill-rule="evenodd" clip-rule="evenodd" d="M245 490C380.31 490 490 380.31 490 245C490 109.69 380.31 0 245 0C109.69 0 0 109.69 0 245C0 380.31 109.69 490 245 490ZM245 466C367.055 466 466 367.055 466 245C466 122.945 367.055 24 245 24C122.945 24 24 122.945 24 245C24 367.055 122.945 466 245 466Z" fill="currentColor"/&gt;
&lt;path d="M335.174 313.737C335.72 308.9 336 303.983 336 299C336 227.203 277.797 169 206 169C134.203 169 76 227.203 76 299C76 352.522 108.344 398.49 154.553 418.423C126.898 397.723 109 364.702 109 327.5C109 264.816 159.816 214 222.5 214C280.526 214 328.381 257.543 335.174 313.737Z" fill="currentColor"/&gt;
&lt;path d="M141.339 288.419C145.255 291.31 149.373 294.011 153.688 296.502C215.866 332.401 295.373 311.097 331.271 248.919C367.17 186.741 345.866 107.234 283.688 71.3359C237.337 44.5749 181.356 49.602 140.989 79.6531C172.743 66.0533 210.289 67.0639 242.506 85.6647C296.793 117.007 315.392 186.422 284.05 240.709C255.037 290.96 193.4 310.633 141.339 288.419Z" fill="currentColor"/&gt;
&lt;path d="M258.759 133.059C254.297 135.004 249.898 137.22 245.583 139.712C183.405 175.61 162.102 255.117 198 317.295C233.899 379.473 313.405 400.777 375.583 364.878C421.935 338.117 445.572 287.122 439.73 237.138C435.631 271.438 415.983 303.448 383.765 322.049C329.479 353.391 260.063 334.792 228.721 280.505C199.708 230.254 213.49 167.038 258.759 133.059Z" fill="currentColor"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Proxies and Good Data for Users&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://learn.foundry.com/katana/4.0/Content/ug/scene_data/proxies_good_data.html"&gt;https://learn.foundry.com/katana/4.0/Content/ug/scene_data/proxies_good_data.html&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;This solution require to have a pre-generated proxy alembic for your
instance-source.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The attributes have to be set on the instances itself.
But it would be less work to set these attributes on the instance-source and
then make sure your OpScript copies the local attributes from the
instance-source to the instance
( with &lt;code&gt;Interface.GetAttr(&amp;quot;&amp;quot;, instanceSourceLocation)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Nothing prevent you to also set it on an &lt;em&gt;array instance&lt;/em&gt;, but this requires
to have already pre-generated an exactly similar-looking alembic.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="modifying-point-clouds-transforms"&gt;
&lt;h3&gt;&lt;a href="#id17"&gt;Modifying point-clouds | Transforms&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You might stumble upon the case where you can‚Äôt re-generate the point-cloud and
you have to move it in Katana. But we can‚Äôt use our good old &lt;code&gt;Transform3D&lt;/code&gt;
friend here because, well, the transformations data is stored in geometry
attributes, and the &lt;code&gt;Transform3D&lt;/code&gt; only modify the &lt;code&gt;xform&lt;/code&gt; attribute !&lt;/p&gt;
&lt;p&gt;But no need to worry I got u a solution on my GitHub :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://github.com/MrLixm/Foundry_Katana/tree/main/src/viewer/PointcloudXform2P"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://github.com/MrLixm/Foundry_Katana/raw/main/src/viewer/PointcloudXform2P/demo.gif" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;PointcloudXform2P&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://github.com/MrLixm/Foundry_Katana/tree/main/src/viewer/PointcloudXform2P"&gt;https://github.com/MrLixm/Foundry_Katana/tree/main/src/viewer/PointcloudXform2P&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;Allow merging xform transformations on a pointcloud location to
the geometry.point.P attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As mentioned, the OpScript only modify the &lt;code&gt;P&lt;/code&gt; attribute, meaning only
the &lt;code&gt;translation&lt;/code&gt; and &lt;code&gt;rotation&lt;/code&gt; from the &lt;code&gt;Transform3D&lt;/code&gt; are applied.&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
But you might not need this as your render-engine probably supports the
use of &lt;code&gt;Transform3D&lt;/code&gt; on the instance(s). (even if the Viewer preview
ignores it, in render, the instances are properly transformed.)&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="modifying-point-clouds-culling"&gt;
&lt;h3&gt;&lt;a href="#id18"&gt;Modifying point-clouds | Culling&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another need would be to prune points to reduce instances. Even if instancing
improve performances , more instances still costs at render-time so you
wanna make sure you are not rendering non-contributing instances.&lt;/p&gt;
&lt;p&gt;For this you could try to see Efthymis‚Äôs OpScript :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://efthymisb.gumroad.com/l/tsrvn"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://cdn.discordapp.com/attachments/752132517405917204/937006446695038986/frustumCulling_thumbnail.gif" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Frustum Culling OpScript for Katana&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://efthymisb.gumroad.com/l/tsrvn"&gt;https://efthymisb.gumroad.com/l/tsrvn&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;p&gt;This OpScript creates Attributes based on if the geometry/point is inside the Camera‚Äôs Frustum Culling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hide geometry that is outside of the Frustum (from the viewport)&lt;/li&gt;
&lt;li&gt;Set Visibility Attribute (for render)&lt;/li&gt;
&lt;li&gt;Create Attributes based on distance from the camera.&lt;/li&gt;
&lt;li&gt;Create instanceSkipIndex attribute for PointClouds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The concept is to use the &lt;code&gt;instanceSkipIndex&lt;/code&gt; attribute, at least for
the &lt;code&gt;array&lt;/code&gt; method, to specify point index that must not be rendered.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;hierarchical&lt;/code&gt; you would need to read this attribute and whenever the
current point index you are visiting is in &lt;code&gt;instanceSkipIndex&lt;/code&gt; you just
don‚Äôt build the instance and skip to the next point.&lt;/p&gt;
&lt;p&gt;I‚Äôm planning to ship a solution with KUI to easily cull points using boxes,
but if you are reading this means the feature has not been implemented yet.
So make sure to follow the &lt;a href="https://github.com/MrLixm/KUI/issues/1"&gt;issue on the github repo&lt;/a&gt; to get notified when this is
implemented.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="katana-uber-instancing"&gt;
&lt;h2&gt;&lt;a href="#id19"&gt;Katana Uber Instancing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we just saw, instancing can require in some cases quite some work before
having a result. That‚Äôs why I tried to produce a solution that would be very
flexible with a very straightforward setup.&lt;/p&gt;
&lt;p&gt;The goal here was to create an ‚Äòuber‚Äô instancing node (just a group node
actually) where, using the same parameters, you could conveniently switch
between different instancing methods and have a lot of flexibility on inputs.
(Leaf-level has been excluded as I‚Äôm not familiar with it.)&lt;/p&gt;
&lt;p&gt;A lot of work has been put into this project, learned a lot about lua and I‚Äôm
really happy to share it with you. (Furthermore open-sourced)&lt;/p&gt;
&lt;p&gt;The project is available on GitHub here :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://github.com/MrLixm/KUI"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://raw.githubusercontent.com/MrLixm/KUI/dev/doc/img/thumbnail.jpg" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;KUI - Github Repository&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://github.com/MrLixm/KUI"&gt;https://github.com/MrLixm/KUI&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;Katana OpScripts for flexible instancing setup.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;I let you check the README.md&lt;/strong&gt; that is listing all the instructions
necessary to use this tool. There is pretty extensive documentation that
should cover everything you need to know.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="render-engines"&gt;
&lt;h2&gt;&lt;a href="#id20"&gt;Render-Engines&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even if you are sure your instancing setup is correct, it might actually not
be what your render-engine expect it to be. So golden rule, first read your
renderer documentation carefully to see what is required, then if it‚Äôs
still not working, you will have to test stuff until it works üò¨.&lt;/p&gt;
&lt;p&gt;For Redshift, check the section right under, for other renderers, here is
what I found :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class="l-bgc-dl-o"&gt;3Delight&lt;/code&gt; AND &lt;code class="l-bgc-prman-o"&gt;Renderman&lt;/code&gt; : arbitrary attribute need
to be &lt;code&gt;Float&lt;/code&gt; and not &lt;code&gt;Double&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class="l-bgc-dl-o"&gt;3Delight&lt;/code&gt; AND &lt;code class="l-bgc-prman-o"&gt;Renderman&lt;/code&gt; : instance array seems to
only support instance matrix attribute and not the other TRS attributes.&lt;/li&gt;
&lt;li&gt;&lt;code class="l-bgc-ai-o"&gt;Arnold&lt;/code&gt; : Using the TRS instances attributes with &lt;code&gt;array&lt;/code&gt;
method led to visually incorrect rotations. You have to use an
&lt;code&gt;instanceMatrix&lt;/code&gt; attribute to see the correct result.&lt;/li&gt;
&lt;li&gt;&lt;code class="l-bgc-ai-o"&gt;Arnold&lt;/code&gt; : for &lt;code&gt;array&lt;/code&gt; instancing, arbitrary attributes need to
have the scope set to &lt;code&gt;point&lt;/code&gt; to work.&lt;/li&gt;
&lt;li&gt;&lt;code class="l-bgc-prman-o"&gt;Renderman&lt;/code&gt; : arbitrary attribute for &lt;code&gt;hierarchical&lt;/code&gt; need to
be located at &lt;code&gt;prmanStatements.attributes.user.&amp;lt;myAttr&amp;gt;.value&lt;/code&gt;.
See &lt;a href="https://rmanwiki.pixar.com/display/RFK24/User+Attributes"&gt;Renderman doc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class="l-bgc-prman-o"&gt;Renderman&lt;/code&gt; :  arbitrary attribute for &lt;code&gt;array&lt;/code&gt; are at the usual
&lt;code&gt;geometry.arbitrary&lt;/code&gt; path but scope need to be &lt;code&gt;primitive&lt;/code&gt;. This mean
the attribute can be used as a &lt;code&gt;primvar&lt;/code&gt; in shading.&lt;/li&gt;
&lt;li&gt;&lt;code class="l-bgc-prman-o"&gt;Renderman&lt;/code&gt; :  for &lt;code&gt;array&lt;/code&gt; instancing, the material must be
assigned on the &lt;code&gt;instance array&lt;/code&gt; location and not on the &lt;em&gt;instances
sources&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check the test scene I used for KUI that should have a working setup
for Arnold, 3Delight and Renderman.&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="m-link-wrap" href="https://github.com/MrLixm/KUI/blob/master/dev/scenes/kui.tests.katana"&gt;https://github.com/MrLixm/KUI/blob/master/dev/scenes/kui.tests.katana&lt;/a&gt;&lt;/blockquote&gt;
&lt;section id="redshift"&gt;
&lt;h3&gt;&lt;a href="#id21"&gt;Redshift&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The production where I had to look for instancing was using Redshift,
and unfortunately, it seems that, at that time, the instancing features where
‚Äúminimally‚Äù implemented and some stuff was missing/broken.
Fortunately, Redshift developer Juanjo was very responsive and very quickly,
fixed all the issues I found. Discussion can be found &lt;a href="https://redshift.maxon.net/topic/33461/more-documentation-for-instancing-in-katana?_=1634997159560"&gt;in this thread&lt;/a&gt;
(maxon account required).&lt;/p&gt;
&lt;p&gt;Didn‚Äôt tested the latest version but I think you should now get the same
features other render-engine have. I‚Äôm just not sure if arbitrary attributes
still need to be in &lt;code&gt;instance.arbitrary&lt;/code&gt; or is the commonly used
&lt;code&gt;geometry.arbitrary&lt;/code&gt; supported ?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="outro"&gt;
&lt;h2&gt;&lt;a href="#id22"&gt;Outro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And that‚Äôs a wrap. Very happy to have finally published this tutorial that was
hanging around for 4 months already haha. A topic that I could have explored in
this post is USD, which is an additional solution for instancing. But
having no experience at all with the format I will let you do the research.&lt;/p&gt;
&lt;p&gt;I really hope this was useful for you because this was
the kind of information I wish I had when starting looking for
instancing !
As always feedback is welcome. If you notice anything let me know
on the PYCO discord (link in the page‚Äôs footer) or just e-mail me.&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://github.com/MrLixm/Foundry_Katana"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://github.com/MrLixm/Foundry_Katana/blob/main/img/thumbnail.jpg?raw=true" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;GitHub - MrLixm/Foundry_Katana&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://github.com/MrLixm/Foundry_Katana"&gt;https://github.com/MrLixm/Foundry_Katana&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;Collection of resources for Foundry‚Äôs Katana software.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://discord.gg/Rgn9ucN"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="100" role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;
    &lt;title&gt;Discord&lt;/title&gt;
    &lt;path fill="currentColor" d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"/&gt;
&lt;/svg&gt;&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Discord - Foundry Katana (Community)&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://discord.gg/Rgn9ucN"&gt;https://discord.gg/Rgn9ucN&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;A community Discord server for Katana with official Foundry staffs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://discord.gg/KepWvn8"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://cdn.discordapp.com/icons/718106101773500527/60b10f494eb6b9387462445f0eef58c6.webp" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Discord - Coding for CGI &amp;amp; VFX&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://discord.gg/KepWvn8"&gt;https://discord.gg/KepWvn8&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;You can find resources related to scripting in Katana on this server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content><category term="tutorial"></category><category term="katana"></category><category term="instancing"></category><category term="lua"></category><category term="software"></category></entry><entry><title>Color-management in Substance Painter with OCIO</title><link href="https://mrlixm.github.io/blog/substance-painter-color-management/" rel="alternate"></link><published>2021-12-08T19:03:00+01:00</published><updated>2022-03-11T11:53:00+01:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2021-12-08:/blog/substance-painter-color-management/</id><summary type="html">&lt;p&gt;The long-awaited OCIO feature is here, now we gotta find how it works.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;It‚Äôs there ! After so much time, Substance-Painter finally saw itself getting
a shiny new color-management system with OCIO support. We‚Äôre going to dive
deeper inside and see how it works.&lt;/p&gt;
&lt;p&gt;The article is divided into two parts.
You got first a theoretical part that will try to explain how
color-management works. This can help you debug issues and just not tweak
settings like a blind machine. This part is not mandatory though. You can
skip straight to the &lt;a href="#substance-setup-workflow"&gt;Substance Setup &amp;amp; Workflow&lt;/a&gt; section if desired.&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
&lt;p&gt;OCIO was introduced in &lt;a href="https://substance3d.adobe.com/documentation/spdoc/version-7-4-223053247.html"&gt;Substance-Painter version 7.4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the version used through this article and some features might
changed at the time you are reading this. I will try to keep the article
updated though.&lt;/p&gt;
&lt;p&gt;This article has been updated following the 7.4.2 update from 08/03/22.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://substance3d.adobe.com/documentation/spdoc/color-management-223053233.html"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://substance3d.adobe.com/documentation/spdoc/_/7F00010101777233846FC8EC6B4E4F33/1638375621662/resources/unfurl/splash_pt.jpg" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Official Documentation&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://substance3d.adobe.com/documentation/spdoc/color-management-223053233.html"&gt;https://substance3d.adobe.com/documentation/spdoc/color-management-223053233.html&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;nav id="contents"&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#color-managed-workflow" id="id2"&gt;Color-managed Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#data-types-color-and-scalar" id="id3"&gt;Data types: Color and Scalar&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#scalar" id="id4"&gt;Scalar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#color" id="id5"&gt;Color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-substance" id="id6"&gt;In Substance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#workflow-sections" id="id7"&gt;Workflow Sections&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#input" id="id8"&gt;Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workspace" id="id9"&gt;Workspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#display" id="id10"&gt;Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#output" id="id11"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example" id="id12"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#substance-setup-workflow" id="id13"&gt;Substance Setup &amp;amp; Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#new-project" id="id14"&gt;New Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ocio-config" id="id15"&gt;OCIO config&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#custom-config" id="id16"&gt;Custom config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-variable" id="id17"&gt;Environment variable&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#global-settings" id="id18"&gt;Global Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-locally-at-startup" id="id19"&gt;Set locally at startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#substance-parameters-for-ocio-configs" id="id20"&gt;Substance parameters for OCIO configs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-project-conclusion" id="id21"&gt;New Project : Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workspace-setup-in-sp" id="id22"&gt;Workspace Setup in Sp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#display-setup-in-sp" id="id23"&gt;Display Setup in Sp&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#displaying-color-and-scalar-data" id="id24"&gt;Displaying Color and Scalar data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#input-setup-in-sp" id="id25"&gt;Input Setup in Sp&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#shelf-resources" id="id26"&gt;Shelf Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-color-picker" id="id27"&gt;The color-picker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment" id="id28"&gt;Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#masks" id="id29"&gt;Masks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#output-setup-in-sp" id="id30"&gt;Output Setup in Sp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#aces-workflow" id="id31"&gt;ACES Workflow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aces-config-setup" id="id32"&gt;ACES - Config setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aces-what-to-do-when-working" id="id33"&gt;ACES - What to do when working&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aces-display" id="id34"&gt;ACES - Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aces-inputs" id="id35"&gt;ACES - Inputs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#aces-environment" id="id36"&gt;ACES - Environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#aces-colorpicker" id="id37"&gt;ACES - Colorpicker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aces-output" id="id38"&gt;ACES - Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ocio-implementation-issues" id="id39"&gt;OCIO Implementation Issues&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#display-issues" id="id40"&gt;Display Issues&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#display-components-mismatch" id="id41"&gt;Display components mismatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#partial-look-support" id="id42"&gt;Partial Look support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#improving-the-substance-ocio-config" id="id43"&gt;Improving the Substance OCIO config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#issues-recap" id="id44"&gt;Issues Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion" id="id45"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources" id="id46"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#changelog" id="id47"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;section id="color-managed-workflow"&gt;
&lt;h2&gt;&lt;a href="#id2"&gt;Color-managed Workflow&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="m-note m-info"&gt;
This part is aimed at beginners, but introduce a too vast topic for this
article. I recommend reading
&lt;a href="https://chrisbrejon.com/cg-cinematography/chapter-1-color-management#rgb-colorspace-and-its-components"&gt;Chris Brejon article‚Äôs section about colorspaces&lt;/a&gt; first, to be sure you understand
some of the technical vocabularies employed.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;We can break the workflow into 4 sections : &lt;code&gt;Input&lt;/code&gt;, &lt;code&gt;Workspace&lt;/code&gt;,
&lt;code&gt;Display&lt;/code&gt; and &lt;code&gt;Output&lt;/code&gt;&lt;/p&gt;
&lt;div class="l-c-color l-mrg-l l-flex-c l-flex-center"&gt;
&lt;svg width="80%" height="80%" viewBox="0 0 630 153" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;"&gt;
    &lt;path d="M15,97L153,97C160.732,97 167,103.268 167,111L167,138C167,145.732 160.732,152 153,152L15,152C7.268,152 1,145.732 1,138L1,111C1,103.268 7.268,97 15,97ZM246,97L384,97C391.732,97 398,103.268 398,111L398,138C398,145.732 391.732,152 384,152L246,152C238.268,152 232,145.732 232,138L232,111C232,103.268 238.268,97 246,97ZM246,1L384,1C391.732,1 398,7.268 398,15L398,42C398,49.732 391.732,56 384,56L246,56C238.268,56 232,49.732 232,42L232,15C232,7.268 238.268,1 246,1ZM477,97L615,97C622.732,97 629,103.268 629,111L629,138C629,145.732 622.732,152 615,152L477,152C469.268,152 463,145.732 463,138L463,111C463,103.268 469.268,97 477,97Z" style="fill:none;fill-rule:nonzero;stroke:currentColor;stroke-width:2px;"/&gt;
    &lt;path d="M231.454,126.575C232.039,125.99 232.039,125.04 231.454,124.454L221.908,114.908C221.322,114.322 220.372,114.322 219.786,114.908C219.201,115.494 219.201,116.444 219.786,117.029L228.272,125.515L219.786,134C219.201,134.586 219.201,135.535 219.786,136.121C220.372,136.707 221.322,136.707 221.908,136.121L231.454,126.575ZM316.454,57.454C315.868,56.868 314.918,56.868 314.332,57.454L304.786,67C304.201,67.586 304.201,68.536 304.786,69.121C305.372,69.707 306.322,69.707 306.908,69.121L315.393,60.636L323.878,69.121C324.464,69.707 325.414,69.707 326,69.121C326.585,68.536 326.585,67.586 326,67L316.454,57.454ZM462.454,126.575C463.039,125.99 463.039,125.04 462.454,124.454L452.908,114.908C452.322,114.322 451.372,114.322 450.786,114.908C450.201,115.494 450.201,116.444 450.786,117.029L459.272,125.515L450.786,134C450.201,134.586 450.201,135.535 450.786,136.121C451.372,136.707 452.322,136.707 452.908,136.121L462.454,126.575ZM168.393,127.015L230.393,127.015L230.393,124.015L168.393,124.015L168.393,127.015ZM316.893,96.515L316.893,58.515L313.893,58.515L313.893,96.515L316.893,96.515ZM399.393,127.015L461.393,127.015L461.393,124.015L399.393,124.015L399.393,127.015Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;rect x="55.73" y="114.938" width="3.516" height="17.063" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M65.41,119.32L65.515,120.785C66.422,119.652 67.637,119.086 69.16,119.086C70.504,119.086 71.504,119.48 72.16,120.27C72.816,121.059 73.152,122.238 73.168,123.809L73.168,132L69.781,132L69.781,123.891C69.781,123.172 69.625,122.652 69.312,122.332C69,122.004 68.48,121.84 67.754,121.84C66.801,121.84 66.086,122.246 65.609,123.059L65.609,132L62.223,132L62.223,119.32L65.41,119.32Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M87.16,125.777C87.16,127.73 86.715,129.297 85.824,130.477C84.941,131.648 83.746,132.234 82.238,132.234C80.957,132.234 79.922,131.789 79.133,130.898L79.133,136.875L75.746,136.875L75.746,119.32L78.887,119.32L79.004,120.562C79.824,119.578 80.894,119.086 82.215,119.086C83.777,119.086 84.992,119.664 85.859,120.82C86.726,121.977 87.16,123.57 87.16,125.602L87.16,125.777ZM83.773,125.531C83.773,124.352 83.562,123.441 83.14,122.801C82.726,122.16 82.121,121.84 81.324,121.84C80.262,121.84 79.531,122.246 79.133,123.059L79.133,128.25C79.547,129.086 80.285,129.504 81.348,129.504C82.965,129.504 83.773,128.18 83.773,125.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M96.863,130.711C96.027,131.727 94.871,132.234 93.394,132.234C92.035,132.234 90.996,131.844 90.277,131.062C89.566,130.281 89.203,129.137 89.187,127.629L89.187,119.32L92.574,119.32L92.574,127.512C92.574,128.832 93.176,129.492 94.379,129.492C95.527,129.492 96.316,129.094 96.746,128.297L96.746,119.32L100.144,119.32L100.144,132L96.957,132L96.863,130.711Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M106.754,116.203L106.754,119.32L108.922,119.32L108.922,121.805L106.754,121.805L106.754,128.133C106.754,128.602 106.844,128.938 107.023,129.141C107.203,129.344 107.547,129.445 108.055,129.445C108.43,129.445 108.762,129.418 109.051,129.363L109.051,131.93C108.387,132.133 107.703,132.234 107,132.234C104.625,132.234 103.414,131.035 103.367,128.637L103.367,121.805L101.515,121.805L101.515,119.32L103.367,119.32L103.367,116.203L106.754,116.203Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M267.547,127.078L269.844,114.938L273.348,114.938L269.562,132L266.023,132L263.246,120.586L260.469,132L256.93,132L253.144,114.938L256.648,114.938L258.957,127.055L261.769,114.938L264.746,114.938L267.547,127.078Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M274.133,125.543C274.133,124.285 274.375,123.164 274.859,122.18C275.344,121.195 276.039,120.434 276.945,119.895C277.859,119.355 278.918,119.086 280.121,119.086C281.832,119.086 283.226,119.609 284.305,120.656C285.391,121.703 285.996,123.125 286.121,124.922L286.144,125.789C286.144,127.734 285.601,129.297 284.516,130.477C283.43,131.648 281.973,132.234 280.144,132.234C278.316,132.234 276.855,131.648 275.762,130.477C274.676,129.305 274.133,127.711 274.133,125.695L274.133,125.543ZM277.519,125.789C277.519,126.992 277.746,127.914 278.199,128.555C278.652,129.188 279.301,129.504 280.144,129.504C280.965,129.504 281.605,129.191 282.066,128.566C282.527,127.934 282.758,126.926 282.758,125.543C282.758,124.363 282.527,123.449 282.066,122.801C281.605,122.152 280.957,121.828 280.121,121.828C279.293,121.828 278.652,122.152 278.199,122.801C277.746,123.441 277.519,124.438 277.519,125.789Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M295.355,122.496C294.894,122.434 294.488,122.402 294.137,122.402C292.855,122.402 292.016,122.836 291.617,123.703L291.617,132L288.23,132L288.23,119.32L291.43,119.32L291.523,120.832C292.203,119.668 293.144,119.086 294.348,119.086C294.723,119.086 295.074,119.137 295.402,119.238L295.355,122.496Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M301.601,126.914L300.383,128.133L300.383,132L296.996,132L296.996,114L300.383,114L300.383,123.973L301.039,123.129L304.285,119.32L308.351,119.32L303.769,124.605L308.75,132L304.859,132L301.601,126.914Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M316.684,128.496C316.684,128.082 316.476,127.758 316.062,127.523C315.656,127.281 315,127.066 314.094,126.879C311.078,126.246 309.57,124.965 309.57,123.035C309.57,121.91 310.035,120.973 310.965,120.223C311.902,119.465 313.125,119.086 314.633,119.086C316.242,119.086 317.527,119.465 318.488,120.223C319.457,120.98 319.941,121.965 319.941,123.176L316.555,123.176C316.555,122.691 316.398,122.293 316.086,121.98C315.773,121.66 315.285,121.5 314.621,121.5C314.051,121.5 313.609,121.629 313.297,121.887C312.984,122.145 312.828,122.473 312.828,122.871C312.828,123.246 313.004,123.551 313.355,123.785C313.715,124.012 314.316,124.211 315.16,124.383C316.004,124.547 316.715,124.734 317.293,124.945C319.082,125.602 319.976,126.738 319.976,128.355C319.976,129.512 319.48,130.449 318.488,131.168C317.496,131.879 316.215,132.234 314.644,132.234C313.582,132.234 312.637,132.047 311.808,131.672C310.988,131.289 310.344,130.77 309.875,130.113C309.406,129.449 309.172,128.734 309.172,127.969L312.383,127.969C312.414,128.57 312.637,129.031 313.051,129.352C313.465,129.672 314.019,129.832 314.715,129.832C315.363,129.832 315.851,129.711 316.18,129.469C316.516,129.219 316.684,128.895 316.684,128.496Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M333.582,125.777C333.582,127.73 333.137,129.297 332.246,130.477C331.363,131.648 330.168,132.234 328.66,132.234C327.379,132.234 326.344,131.789 325.555,130.898L325.555,136.875L322.168,136.875L322.168,119.32L325.308,119.32L325.426,120.562C326.246,119.578 327.316,119.086 328.637,119.086C330.199,119.086 331.414,119.664 332.281,120.82C333.148,121.977 333.582,123.57 333.582,125.602L333.582,125.777ZM330.195,125.531C330.195,124.352 329.984,123.441 329.562,122.801C329.148,122.16 328.543,121.84 327.746,121.84C326.684,121.84 325.953,122.246 325.555,123.059L325.555,128.25C325.969,129.086 326.707,129.504 327.769,129.504C329.387,129.504 330.195,128.18 330.195,125.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M343.039,132C342.883,131.695 342.769,131.316 342.699,130.863C341.879,131.777 340.812,132.234 339.5,132.234C338.258,132.234 337.226,131.875 336.406,131.156C335.594,130.438 335.187,129.531 335.187,128.438C335.187,127.094 335.684,126.062 336.676,125.344C337.676,124.625 339.117,124.262 341,124.254L342.558,124.254L342.558,123.527C342.558,122.941 342.406,122.473 342.101,122.121C341.805,121.77 341.332,121.594 340.684,121.594C340.113,121.594 339.664,121.73 339.336,122.004C339.016,122.277 338.855,122.652 338.855,123.129L335.469,123.129C335.469,122.395 335.695,121.715 336.148,121.09C336.601,120.465 337.242,119.977 338.07,119.625C338.898,119.266 339.828,119.086 340.859,119.086C342.422,119.086 343.66,119.48 344.574,120.27C345.496,121.051 345.957,122.152 345.957,123.574L345.957,129.07C345.965,130.273 346.133,131.184 346.461,131.801L346.461,132L343.039,132ZM340.238,129.645C340.738,129.645 341.199,129.535 341.621,129.316C342.043,129.09 342.355,128.789 342.558,128.414L342.558,126.234L341.293,126.234C339.598,126.234 338.695,126.82 338.586,127.992L338.574,128.191C338.574,128.613 338.723,128.961 339.019,129.234C339.316,129.508 339.723,129.645 340.238,129.645Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M353.832,129.504C354.457,129.504 354.965,129.332 355.355,128.988C355.746,128.645 355.949,128.188 355.965,127.617L359.141,127.617C359.133,128.477 358.898,129.266 358.437,129.984C357.976,130.695 357.344,131.25 356.539,131.648C355.742,132.039 354.859,132.234 353.891,132.234C352.078,132.234 350.648,131.66 349.601,130.512C348.555,129.355 348.031,127.762 348.031,125.73L348.031,125.508C348.031,123.555 348.551,121.996 349.59,120.832C350.629,119.668 352.055,119.086 353.867,119.086C355.453,119.086 356.723,119.539 357.676,120.445C358.637,121.344 359.125,122.543 359.141,124.043L355.965,124.043C355.949,123.387 355.746,122.855 355.355,122.449C354.965,122.035 354.449,121.828 353.808,121.828C353.019,121.828 352.422,122.117 352.016,122.695C351.617,123.266 351.418,124.195 351.418,125.484L351.418,125.836C351.418,127.141 351.617,128.078 352.016,128.648C352.414,129.219 353.019,129.504 353.832,129.504Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M366.91,132.234C365.051,132.234 363.535,131.664 362.363,130.523C361.199,129.383 360.617,127.863 360.617,125.965L360.617,125.637C360.617,124.363 360.863,123.227 361.355,122.227C361.848,121.219 362.543,120.445 363.441,119.906C364.348,119.359 365.379,119.086 366.535,119.086C368.269,119.086 369.633,119.633 370.625,120.727C371.625,121.82 372.125,123.371 372.125,125.379L372.125,126.762L364.051,126.762C364.16,127.59 364.488,128.254 365.035,128.754C365.59,129.254 366.289,129.504 367.133,129.504C368.437,129.504 369.457,129.031 370.191,128.086L371.855,129.949C371.348,130.668 370.66,131.23 369.793,131.637C368.926,132.035 367.965,132.234 366.91,132.234ZM366.523,121.828C365.851,121.828 365.305,122.055 364.883,122.508C364.469,122.961 364.203,123.609 364.086,124.453L368.797,124.453L368.797,124.184C368.781,123.434 368.578,122.855 368.187,122.449C367.797,122.035 367.242,121.828 366.523,121.828Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M274.789,36L274.789,18.938L280.039,18.938C281.539,18.938 282.879,19.277 284.058,19.957C285.246,20.629 286.172,21.59 286.836,22.84C287.5,24.082 287.832,25.496 287.832,27.082L287.832,27.867C287.832,29.453 287.504,30.863 286.848,32.098C286.199,33.332 285.281,34.289 284.094,34.969C282.906,35.648 281.566,35.992 280.074,36L274.789,36ZM278.305,21.785L278.305,33.176L280.004,33.176C281.379,33.176 282.43,32.727 283.156,31.828C283.883,30.93 284.254,29.645 284.269,27.973L284.269,27.07C284.269,25.336 283.91,24.023 283.191,23.133C282.473,22.234 281.422,21.785 280.039,21.785L278.305,21.785Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M293.75,36L290.351,36L290.351,23.32L293.75,23.32L293.75,36ZM290.152,20.039C290.152,19.531 290.32,19.113 290.656,18.785C291,18.457 291.465,18.293 292.051,18.293C292.629,18.293 293.09,18.457 293.434,18.785C293.777,19.113 293.949,19.531 293.949,20.039C293.949,20.555 293.773,20.977 293.422,21.305C293.078,21.633 292.621,21.797 292.051,21.797C291.48,21.797 291.019,21.633 290.668,21.305C290.324,20.977 290.152,20.555 290.152,20.039Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M303.418,32.496C303.418,32.082 303.211,31.758 302.797,31.523C302.391,31.281 301.734,31.066 300.828,30.879C297.812,30.246 296.305,28.965 296.305,27.035C296.305,25.91 296.769,24.973 297.699,24.223C298.637,23.465 299.859,23.086 301.367,23.086C302.976,23.086 304.262,23.465 305.223,24.223C306.191,24.98 306.676,25.965 306.676,27.176L303.289,27.176C303.289,26.691 303.133,26.293 302.82,25.98C302.508,25.66 302.019,25.5 301.355,25.5C300.785,25.5 300.344,25.629 300.031,25.887C299.719,26.145 299.562,26.473 299.562,26.871C299.562,27.246 299.738,27.551 300.09,27.785C300.449,28.012 301.051,28.211 301.894,28.383C302.738,28.547 303.449,28.734 304.027,28.945C305.816,29.602 306.711,30.738 306.711,32.356C306.711,33.512 306.215,34.449 305.223,35.168C304.23,35.879 302.949,36.234 301.379,36.234C300.316,36.234 299.371,36.047 298.543,35.672C297.723,35.289 297.078,34.77 296.609,34.113C296.141,33.449 295.906,32.734 295.906,31.969L299.117,31.969C299.148,32.57 299.371,33.031 299.785,33.352C300.199,33.672 300.754,33.832 301.449,33.832C302.098,33.832 302.586,33.711 302.914,33.469C303.25,33.219 303.418,32.895 303.418,32.496Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M320.316,29.777C320.316,31.731 319.871,33.297 318.98,34.477C318.098,35.648 316.902,36.234 315.394,36.234C314.113,36.234 313.078,35.789 312.289,34.898L312.289,40.875L308.902,40.875L308.902,23.32L312.043,23.32L312.16,24.563C312.98,23.578 314.051,23.086 315.371,23.086C316.934,23.086 318.148,23.664 319.016,24.82C319.883,25.977 320.316,27.57 320.316,29.602L320.316,29.777ZM316.93,29.531C316.93,28.352 316.719,27.441 316.297,26.801C315.883,26.16 315.277,25.84 314.48,25.84C313.418,25.84 312.687,26.246 312.289,27.059L312.289,32.25C312.703,33.086 313.441,33.504 314.504,33.504C316.121,33.504 316.93,32.18 316.93,29.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;rect x="322.601" y="18" width="3.399" height="18" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M336.148,36C335.992,35.695 335.879,35.316 335.808,34.863C334.988,35.777 333.922,36.234 332.609,36.234C331.367,36.234 330.336,35.875 329.516,35.156C328.703,34.438 328.297,33.531 328.297,32.438C328.297,31.094 328.793,30.063 329.785,29.344C330.785,28.625 332.226,28.262 334.109,28.254L335.668,28.254L335.668,27.527C335.668,26.941 335.516,26.473 335.211,26.121C334.914,25.77 334.441,25.594 333.793,25.594C333.223,25.594 332.773,25.73 332.445,26.004C332.125,26.277 331.965,26.652 331.965,27.129L328.578,27.129C328.578,26.395 328.805,25.715 329.258,25.09C329.711,24.465 330.351,23.977 331.18,23.625C332.008,23.266 332.937,23.086 333.969,23.086C335.531,23.086 336.769,23.48 337.684,24.27C338.605,25.051 339.066,26.152 339.066,27.574L339.066,33.07C339.074,34.273 339.242,35.184 339.57,35.801L339.57,36L336.148,36ZM333.348,33.645C333.848,33.645 334.308,33.535 334.73,33.316C335.152,33.09 335.465,32.789 335.668,32.414L335.668,30.234L334.402,30.234C332.707,30.234 331.805,30.82 331.695,31.992L331.684,32.191C331.684,32.613 331.832,32.961 332.129,33.234C332.426,33.508 332.832,33.645 333.348,33.645Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M346.215,31.207L348.558,23.32L352.191,23.32L347.094,37.969L346.812,38.637C346.055,40.293 344.805,41.121 343.062,41.121C342.57,41.121 342.07,41.047 341.562,40.898L341.562,38.332L342.078,38.344C342.719,38.344 343.195,38.246 343.508,38.051C343.828,37.856 344.078,37.531 344.258,37.078L344.656,36.035L340.215,23.32L343.859,23.32L346.215,31.207Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M522.699,123.855C522.699,125.535 522.402,127.008 521.808,128.273C521.215,129.539 520.363,130.516 519.254,131.203C518.152,131.891 516.887,132.234 515.457,132.234C514.043,132.234 512.781,131.895 511.672,131.215C510.562,130.535 509.703,129.566 509.094,128.309C508.484,127.043 508.176,125.59 508.168,123.949L508.168,123.105C508.168,121.426 508.469,119.949 509.07,118.676C509.68,117.394 510.535,116.414 511.637,115.734C512.746,115.047 514.012,114.703 515.434,114.703C516.855,114.703 518.117,115.047 519.219,115.734C520.328,116.414 521.184,117.394 521.785,118.676C522.394,119.949 522.699,121.422 522.699,123.094L522.699,123.855ZM519.137,123.082C519.137,121.293 518.816,119.934 518.176,119.004C517.535,118.074 516.621,117.609 515.434,117.609C514.254,117.609 513.344,118.07 512.703,118.992C512.062,119.906 511.738,121.25 511.73,123.023L511.73,123.855C511.73,125.598 512.051,126.949 512.691,127.91C513.332,128.871 514.254,129.352 515.457,129.352C516.637,129.352 517.543,128.891 518.176,127.969C518.808,127.039 519.129,125.688 519.137,123.914L519.137,123.082Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M532.625,130.711C531.789,131.727 530.633,132.234 529.156,132.234C527.797,132.234 526.758,131.844 526.039,131.062C525.328,130.281 524.965,129.137 524.949,127.629L524.949,119.32L528.336,119.32L528.336,127.512C528.336,128.832 528.937,129.492 530.141,129.492C531.289,129.492 532.078,129.094 532.508,128.297L532.508,119.32L535.906,119.32L535.906,132L532.719,132L532.625,130.711Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M542.516,116.203L542.516,119.32L544.684,119.32L544.684,121.805L542.516,121.805L542.516,128.133C542.516,128.602 542.605,128.938 542.785,129.141C542.965,129.344 543.308,129.445 543.816,129.445C544.191,129.445 544.523,129.418 544.812,129.363L544.812,131.93C544.148,132.133 543.465,132.234 542.762,132.234C540.387,132.234 539.176,131.035 539.129,128.637L539.129,121.805L537.277,121.805L537.277,119.32L539.129,119.32L539.129,116.203L542.516,116.203Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M557.984,125.777C557.984,127.73 557.539,129.297 556.648,130.477C555.766,131.648 554.57,132.234 553.062,132.234C551.781,132.234 550.746,131.789 549.957,130.898L549.957,136.875L546.57,136.875L546.57,119.32L549.711,119.32L549.828,120.562C550.648,119.578 551.719,119.086 553.039,119.086C554.601,119.086 555.816,119.664 556.684,120.82C557.551,121.977 557.984,123.57 557.984,125.602L557.984,125.777ZM554.598,125.531C554.598,124.352 554.387,123.441 553.965,122.801C553.551,122.16 552.945,121.84 552.148,121.84C551.086,121.84 550.355,122.246 549.957,123.059L549.957,128.25C550.371,129.086 551.109,129.504 552.172,129.504C553.789,129.504 554.598,128.18 554.598,125.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M567.687,130.711C566.851,131.727 565.695,132.234 564.219,132.234C562.859,132.234 561.82,131.844 561.101,131.062C560.391,130.281 560.027,129.137 560.012,127.629L560.012,119.32L563.398,119.32L563.398,127.512C563.398,128.832 564,129.492 565.203,129.492C566.351,129.492 567.141,129.094 567.57,128.297L567.57,119.32L570.969,119.32L570.969,132L567.781,132L567.687,130.711Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M577.578,116.203L577.578,119.32L579.746,119.32L579.746,121.805L577.578,121.805L577.578,128.133C577.578,128.602 577.668,128.938 577.848,129.141C578.027,129.344 578.371,129.445 578.879,129.445C579.254,129.445 579.586,129.418 579.875,129.363L579.875,131.93C579.211,132.133 578.527,132.234 577.824,132.234C575.449,132.234 574.238,131.035 574.191,128.637L574.191,121.805L572.34,121.805L572.34,119.32L574.191,119.32L574.191,116.203L577.578,116.203Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;p&gt;You transfer &lt;code&gt;data&lt;/code&gt; between each of these section. Data that must be
potentially decoded and then encoded, depending on what the section required.
In Substance Painter this &lt;code&gt;data&lt;/code&gt; is most of the time pixels, encoded
using the RGB color model.&lt;/p&gt;
&lt;p&gt;All of these data-transfers allow me to introduce the most important rule:
&lt;span class="m-text m-primary"&gt;you always need to know where you start to know where you are
going&lt;/span&gt;.
As an example, in the above diagram, to convert the &lt;code&gt;Input&lt;/code&gt; data to the
&lt;code&gt;Workspace&lt;/code&gt; data, we need to know how the &lt;code&gt;Input&lt;/code&gt; data is encoded (in our
case, which colorspace).&lt;/p&gt;
&lt;section id="data-types-color-and-scalar"&gt;
&lt;h3&gt;&lt;a href="#id3"&gt;Data types: Color and Scalar&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;‚ÄúWhere you start‚Äù means first, what type of data are you manipulating ?&lt;/p&gt;
&lt;p&gt;There are only two types : &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;scalar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is important to know which one your data belongs to because the scalar
one doesn‚Äôt require your data to be color-managed and as such skip a
complex part.&lt;/p&gt;
&lt;section id="scalar"&gt;
&lt;h4&gt;&lt;a href="#id4"&gt;Scalar&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Scalar data has no means to be displayed directly, the data store numbers
that can be used to drive other types of data. We are only interested in the
original value of these numbers and as such this kind of data &lt;strong&gt;must never
be altered by color-transformations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To get to more concrete examples scalar data include but is not limited to:
roughness, normals, masks, displacement, vectors, ‚Ä¶&lt;/p&gt;
&lt;aside class="m-note m-warning"&gt;
This is not because the data, when displayed, is not grayscale, that it
is color data. For example normal maps, even if colored, ARE scalar data.&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="color"&gt;
&lt;h4&gt;&lt;a href="#id5"&gt;Color&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Everything that is not scalar. Values stored are intended to be displayed
directly. These values are always encoded in some colorspace and require to be
decoded properly.&lt;/p&gt;
&lt;p&gt;This include but is not limited to : diffuse/albedo/base-color, subsurface
color, specular color, refraction color, every image displayed on the web, ‚Ä¶&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-substance"&gt;
&lt;h4&gt;&lt;a href="#id6"&gt;In Substance&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In Substance you will find this separation depending on the channel you
are working on. &lt;a href="https://substance3d.adobe.com/documentation/spdoc/color-management-223053233.html#section5"&gt;The full list of color-managed channels is available here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As Substance is aware if the channel needs to be color-managed, some operations
will be adjusted/skipped. An application of this is the &lt;code&gt;view transform&lt;/code&gt;
that will be disabled when viewing a scalar channel.&lt;/p&gt;
&lt;p&gt;This notion will be also applied by yourself when needed to specify the
colorspace encoding of a resource (images, alphas, materials, ‚Ä¶).
If you import a roughness texture, as it is scalar data you will have to
specify the ‚Äúcolorspace‚Äù as ‚Äúraw‚Äù, so no special decoding is applied.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="workflow-sections"&gt;
&lt;h3&gt;&lt;a href="#id7"&gt;Workflow Sections&lt;/a&gt;&lt;/h3&gt;
&lt;div class="l-c-color l-mrg-l l-flex-c l-flex-center"&gt;
&lt;svg width="80%" height="80%" viewBox="0 0 630 153" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;"&gt;
    &lt;path d="M15,97L153,97C160.732,97 167,103.268 167,111L167,138C167,145.732 160.732,152 153,152L15,152C7.268,152 1,145.732 1,138L1,111C1,103.268 7.268,97 15,97ZM246,97L384,97C391.732,97 398,103.268 398,111L398,138C398,145.732 391.732,152 384,152L246,152C238.268,152 232,145.732 232,138L232,111C232,103.268 238.268,97 246,97ZM246,1L384,1C391.732,1 398,7.268 398,15L398,42C398,49.732 391.732,56 384,56L246,56C238.268,56 232,49.732 232,42L232,15C232,7.268 238.268,1 246,1ZM477,97L615,97C622.732,97 629,103.268 629,111L629,138C629,145.732 622.732,152 615,152L477,152C469.268,152 463,145.732 463,138L463,111C463,103.268 469.268,97 477,97Z" style="fill:none;fill-rule:nonzero;stroke:currentColor;stroke-width:2px;"/&gt;
    &lt;path d="M231.454,126.575C232.039,125.99 232.039,125.04 231.454,124.454L221.908,114.908C221.322,114.322 220.372,114.322 219.786,114.908C219.201,115.494 219.201,116.444 219.786,117.029L228.272,125.515L219.786,134C219.201,134.586 219.201,135.535 219.786,136.121C220.372,136.707 221.322,136.707 221.908,136.121L231.454,126.575ZM316.454,57.454C315.868,56.868 314.918,56.868 314.332,57.454L304.786,67C304.201,67.586 304.201,68.536 304.786,69.121C305.372,69.707 306.322,69.707 306.908,69.121L315.393,60.636L323.878,69.121C324.464,69.707 325.414,69.707 326,69.121C326.585,68.536 326.585,67.586 326,67L316.454,57.454ZM462.454,126.575C463.039,125.99 463.039,125.04 462.454,124.454L452.908,114.908C452.322,114.322 451.372,114.322 450.786,114.908C450.201,115.494 450.201,116.444 450.786,117.029L459.272,125.515L450.786,134C450.201,134.586 450.201,135.535 450.786,136.121C451.372,136.707 452.322,136.707 452.908,136.121L462.454,126.575ZM168.393,127.015L230.393,127.015L230.393,124.015L168.393,124.015L168.393,127.015ZM316.893,96.515L316.893,58.515L313.893,58.515L313.893,96.515L316.893,96.515ZM399.393,127.015L461.393,127.015L461.393,124.015L399.393,124.015L399.393,127.015Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;rect x="55.73" y="114.938" width="3.516" height="17.063" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M65.41,119.32L65.515,120.785C66.422,119.652 67.637,119.086 69.16,119.086C70.504,119.086 71.504,119.48 72.16,120.27C72.816,121.059 73.152,122.238 73.168,123.809L73.168,132L69.781,132L69.781,123.891C69.781,123.172 69.625,122.652 69.312,122.332C69,122.004 68.48,121.84 67.754,121.84C66.801,121.84 66.086,122.246 65.609,123.059L65.609,132L62.223,132L62.223,119.32L65.41,119.32Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M87.16,125.777C87.16,127.73 86.715,129.297 85.824,130.477C84.941,131.648 83.746,132.234 82.238,132.234C80.957,132.234 79.922,131.789 79.133,130.898L79.133,136.875L75.746,136.875L75.746,119.32L78.887,119.32L79.004,120.562C79.824,119.578 80.894,119.086 82.215,119.086C83.777,119.086 84.992,119.664 85.859,120.82C86.726,121.977 87.16,123.57 87.16,125.602L87.16,125.777ZM83.773,125.531C83.773,124.352 83.562,123.441 83.14,122.801C82.726,122.16 82.121,121.84 81.324,121.84C80.262,121.84 79.531,122.246 79.133,123.059L79.133,128.25C79.547,129.086 80.285,129.504 81.348,129.504C82.965,129.504 83.773,128.18 83.773,125.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M96.863,130.711C96.027,131.727 94.871,132.234 93.394,132.234C92.035,132.234 90.996,131.844 90.277,131.062C89.566,130.281 89.203,129.137 89.187,127.629L89.187,119.32L92.574,119.32L92.574,127.512C92.574,128.832 93.176,129.492 94.379,129.492C95.527,129.492 96.316,129.094 96.746,128.297L96.746,119.32L100.144,119.32L100.144,132L96.957,132L96.863,130.711Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M106.754,116.203L106.754,119.32L108.922,119.32L108.922,121.805L106.754,121.805L106.754,128.133C106.754,128.602 106.844,128.938 107.023,129.141C107.203,129.344 107.547,129.445 108.055,129.445C108.43,129.445 108.762,129.418 109.051,129.363L109.051,131.93C108.387,132.133 107.703,132.234 107,132.234C104.625,132.234 103.414,131.035 103.367,128.637L103.367,121.805L101.515,121.805L101.515,119.32L103.367,119.32L103.367,116.203L106.754,116.203Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M267.547,127.078L269.844,114.938L273.348,114.938L269.562,132L266.023,132L263.246,120.586L260.469,132L256.93,132L253.144,114.938L256.648,114.938L258.957,127.055L261.769,114.938L264.746,114.938L267.547,127.078Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M274.133,125.543C274.133,124.285 274.375,123.164 274.859,122.18C275.344,121.195 276.039,120.434 276.945,119.895C277.859,119.355 278.918,119.086 280.121,119.086C281.832,119.086 283.226,119.609 284.305,120.656C285.391,121.703 285.996,123.125 286.121,124.922L286.144,125.789C286.144,127.734 285.601,129.297 284.516,130.477C283.43,131.648 281.973,132.234 280.144,132.234C278.316,132.234 276.855,131.648 275.762,130.477C274.676,129.305 274.133,127.711 274.133,125.695L274.133,125.543ZM277.519,125.789C277.519,126.992 277.746,127.914 278.199,128.555C278.652,129.188 279.301,129.504 280.144,129.504C280.965,129.504 281.605,129.191 282.066,128.566C282.527,127.934 282.758,126.926 282.758,125.543C282.758,124.363 282.527,123.449 282.066,122.801C281.605,122.152 280.957,121.828 280.121,121.828C279.293,121.828 278.652,122.152 278.199,122.801C277.746,123.441 277.519,124.438 277.519,125.789Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M295.355,122.496C294.894,122.434 294.488,122.402 294.137,122.402C292.855,122.402 292.016,122.836 291.617,123.703L291.617,132L288.23,132L288.23,119.32L291.43,119.32L291.523,120.832C292.203,119.668 293.144,119.086 294.348,119.086C294.723,119.086 295.074,119.137 295.402,119.238L295.355,122.496Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M301.601,126.914L300.383,128.133L300.383,132L296.996,132L296.996,114L300.383,114L300.383,123.973L301.039,123.129L304.285,119.32L308.351,119.32L303.769,124.605L308.75,132L304.859,132L301.601,126.914Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M316.684,128.496C316.684,128.082 316.476,127.758 316.062,127.523C315.656,127.281 315,127.066 314.094,126.879C311.078,126.246 309.57,124.965 309.57,123.035C309.57,121.91 310.035,120.973 310.965,120.223C311.902,119.465 313.125,119.086 314.633,119.086C316.242,119.086 317.527,119.465 318.488,120.223C319.457,120.98 319.941,121.965 319.941,123.176L316.555,123.176C316.555,122.691 316.398,122.293 316.086,121.98C315.773,121.66 315.285,121.5 314.621,121.5C314.051,121.5 313.609,121.629 313.297,121.887C312.984,122.145 312.828,122.473 312.828,122.871C312.828,123.246 313.004,123.551 313.355,123.785C313.715,124.012 314.316,124.211 315.16,124.383C316.004,124.547 316.715,124.734 317.293,124.945C319.082,125.602 319.976,126.738 319.976,128.355C319.976,129.512 319.48,130.449 318.488,131.168C317.496,131.879 316.215,132.234 314.644,132.234C313.582,132.234 312.637,132.047 311.808,131.672C310.988,131.289 310.344,130.77 309.875,130.113C309.406,129.449 309.172,128.734 309.172,127.969L312.383,127.969C312.414,128.57 312.637,129.031 313.051,129.352C313.465,129.672 314.019,129.832 314.715,129.832C315.363,129.832 315.851,129.711 316.18,129.469C316.516,129.219 316.684,128.895 316.684,128.496Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M333.582,125.777C333.582,127.73 333.137,129.297 332.246,130.477C331.363,131.648 330.168,132.234 328.66,132.234C327.379,132.234 326.344,131.789 325.555,130.898L325.555,136.875L322.168,136.875L322.168,119.32L325.308,119.32L325.426,120.562C326.246,119.578 327.316,119.086 328.637,119.086C330.199,119.086 331.414,119.664 332.281,120.82C333.148,121.977 333.582,123.57 333.582,125.602L333.582,125.777ZM330.195,125.531C330.195,124.352 329.984,123.441 329.562,122.801C329.148,122.16 328.543,121.84 327.746,121.84C326.684,121.84 325.953,122.246 325.555,123.059L325.555,128.25C325.969,129.086 326.707,129.504 327.769,129.504C329.387,129.504 330.195,128.18 330.195,125.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M343.039,132C342.883,131.695 342.769,131.316 342.699,130.863C341.879,131.777 340.812,132.234 339.5,132.234C338.258,132.234 337.226,131.875 336.406,131.156C335.594,130.438 335.187,129.531 335.187,128.438C335.187,127.094 335.684,126.062 336.676,125.344C337.676,124.625 339.117,124.262 341,124.254L342.558,124.254L342.558,123.527C342.558,122.941 342.406,122.473 342.101,122.121C341.805,121.77 341.332,121.594 340.684,121.594C340.113,121.594 339.664,121.73 339.336,122.004C339.016,122.277 338.855,122.652 338.855,123.129L335.469,123.129C335.469,122.395 335.695,121.715 336.148,121.09C336.601,120.465 337.242,119.977 338.07,119.625C338.898,119.266 339.828,119.086 340.859,119.086C342.422,119.086 343.66,119.48 344.574,120.27C345.496,121.051 345.957,122.152 345.957,123.574L345.957,129.07C345.965,130.273 346.133,131.184 346.461,131.801L346.461,132L343.039,132ZM340.238,129.645C340.738,129.645 341.199,129.535 341.621,129.316C342.043,129.09 342.355,128.789 342.558,128.414L342.558,126.234L341.293,126.234C339.598,126.234 338.695,126.82 338.586,127.992L338.574,128.191C338.574,128.613 338.723,128.961 339.019,129.234C339.316,129.508 339.723,129.645 340.238,129.645Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M353.832,129.504C354.457,129.504 354.965,129.332 355.355,128.988C355.746,128.645 355.949,128.188 355.965,127.617L359.141,127.617C359.133,128.477 358.898,129.266 358.437,129.984C357.976,130.695 357.344,131.25 356.539,131.648C355.742,132.039 354.859,132.234 353.891,132.234C352.078,132.234 350.648,131.66 349.601,130.512C348.555,129.355 348.031,127.762 348.031,125.73L348.031,125.508C348.031,123.555 348.551,121.996 349.59,120.832C350.629,119.668 352.055,119.086 353.867,119.086C355.453,119.086 356.723,119.539 357.676,120.445C358.637,121.344 359.125,122.543 359.141,124.043L355.965,124.043C355.949,123.387 355.746,122.855 355.355,122.449C354.965,122.035 354.449,121.828 353.808,121.828C353.019,121.828 352.422,122.117 352.016,122.695C351.617,123.266 351.418,124.195 351.418,125.484L351.418,125.836C351.418,127.141 351.617,128.078 352.016,128.648C352.414,129.219 353.019,129.504 353.832,129.504Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M366.91,132.234C365.051,132.234 363.535,131.664 362.363,130.523C361.199,129.383 360.617,127.863 360.617,125.965L360.617,125.637C360.617,124.363 360.863,123.227 361.355,122.227C361.848,121.219 362.543,120.445 363.441,119.906C364.348,119.359 365.379,119.086 366.535,119.086C368.269,119.086 369.633,119.633 370.625,120.727C371.625,121.82 372.125,123.371 372.125,125.379L372.125,126.762L364.051,126.762C364.16,127.59 364.488,128.254 365.035,128.754C365.59,129.254 366.289,129.504 367.133,129.504C368.437,129.504 369.457,129.031 370.191,128.086L371.855,129.949C371.348,130.668 370.66,131.23 369.793,131.637C368.926,132.035 367.965,132.234 366.91,132.234ZM366.523,121.828C365.851,121.828 365.305,122.055 364.883,122.508C364.469,122.961 364.203,123.609 364.086,124.453L368.797,124.453L368.797,124.184C368.781,123.434 368.578,122.855 368.187,122.449C367.797,122.035 367.242,121.828 366.523,121.828Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M274.789,36L274.789,18.938L280.039,18.938C281.539,18.938 282.879,19.277 284.058,19.957C285.246,20.629 286.172,21.59 286.836,22.84C287.5,24.082 287.832,25.496 287.832,27.082L287.832,27.867C287.832,29.453 287.504,30.863 286.848,32.098C286.199,33.332 285.281,34.289 284.094,34.969C282.906,35.648 281.566,35.992 280.074,36L274.789,36ZM278.305,21.785L278.305,33.176L280.004,33.176C281.379,33.176 282.43,32.727 283.156,31.828C283.883,30.93 284.254,29.645 284.269,27.973L284.269,27.07C284.269,25.336 283.91,24.023 283.191,23.133C282.473,22.234 281.422,21.785 280.039,21.785L278.305,21.785Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M293.75,36L290.351,36L290.351,23.32L293.75,23.32L293.75,36ZM290.152,20.039C290.152,19.531 290.32,19.113 290.656,18.785C291,18.457 291.465,18.293 292.051,18.293C292.629,18.293 293.09,18.457 293.434,18.785C293.777,19.113 293.949,19.531 293.949,20.039C293.949,20.555 293.773,20.977 293.422,21.305C293.078,21.633 292.621,21.797 292.051,21.797C291.48,21.797 291.019,21.633 290.668,21.305C290.324,20.977 290.152,20.555 290.152,20.039Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M303.418,32.496C303.418,32.082 303.211,31.758 302.797,31.523C302.391,31.281 301.734,31.066 300.828,30.879C297.812,30.246 296.305,28.965 296.305,27.035C296.305,25.91 296.769,24.973 297.699,24.223C298.637,23.465 299.859,23.086 301.367,23.086C302.976,23.086 304.262,23.465 305.223,24.223C306.191,24.98 306.676,25.965 306.676,27.176L303.289,27.176C303.289,26.691 303.133,26.293 302.82,25.98C302.508,25.66 302.019,25.5 301.355,25.5C300.785,25.5 300.344,25.629 300.031,25.887C299.719,26.145 299.562,26.473 299.562,26.871C299.562,27.246 299.738,27.551 300.09,27.785C300.449,28.012 301.051,28.211 301.894,28.383C302.738,28.547 303.449,28.734 304.027,28.945C305.816,29.602 306.711,30.738 306.711,32.356C306.711,33.512 306.215,34.449 305.223,35.168C304.23,35.879 302.949,36.234 301.379,36.234C300.316,36.234 299.371,36.047 298.543,35.672C297.723,35.289 297.078,34.77 296.609,34.113C296.141,33.449 295.906,32.734 295.906,31.969L299.117,31.969C299.148,32.57 299.371,33.031 299.785,33.352C300.199,33.672 300.754,33.832 301.449,33.832C302.098,33.832 302.586,33.711 302.914,33.469C303.25,33.219 303.418,32.895 303.418,32.496Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M320.316,29.777C320.316,31.731 319.871,33.297 318.98,34.477C318.098,35.648 316.902,36.234 315.394,36.234C314.113,36.234 313.078,35.789 312.289,34.898L312.289,40.875L308.902,40.875L308.902,23.32L312.043,23.32L312.16,24.563C312.98,23.578 314.051,23.086 315.371,23.086C316.934,23.086 318.148,23.664 319.016,24.82C319.883,25.977 320.316,27.57 320.316,29.602L320.316,29.777ZM316.93,29.531C316.93,28.352 316.719,27.441 316.297,26.801C315.883,26.16 315.277,25.84 314.48,25.84C313.418,25.84 312.687,26.246 312.289,27.059L312.289,32.25C312.703,33.086 313.441,33.504 314.504,33.504C316.121,33.504 316.93,32.18 316.93,29.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;rect x="322.601" y="18" width="3.399" height="18" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M336.148,36C335.992,35.695 335.879,35.316 335.808,34.863C334.988,35.777 333.922,36.234 332.609,36.234C331.367,36.234 330.336,35.875 329.516,35.156C328.703,34.438 328.297,33.531 328.297,32.438C328.297,31.094 328.793,30.063 329.785,29.344C330.785,28.625 332.226,28.262 334.109,28.254L335.668,28.254L335.668,27.527C335.668,26.941 335.516,26.473 335.211,26.121C334.914,25.77 334.441,25.594 333.793,25.594C333.223,25.594 332.773,25.73 332.445,26.004C332.125,26.277 331.965,26.652 331.965,27.129L328.578,27.129C328.578,26.395 328.805,25.715 329.258,25.09C329.711,24.465 330.351,23.977 331.18,23.625C332.008,23.266 332.937,23.086 333.969,23.086C335.531,23.086 336.769,23.48 337.684,24.27C338.605,25.051 339.066,26.152 339.066,27.574L339.066,33.07C339.074,34.273 339.242,35.184 339.57,35.801L339.57,36L336.148,36ZM333.348,33.645C333.848,33.645 334.308,33.535 334.73,33.316C335.152,33.09 335.465,32.789 335.668,32.414L335.668,30.234L334.402,30.234C332.707,30.234 331.805,30.82 331.695,31.992L331.684,32.191C331.684,32.613 331.832,32.961 332.129,33.234C332.426,33.508 332.832,33.645 333.348,33.645Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M346.215,31.207L348.558,23.32L352.191,23.32L347.094,37.969L346.812,38.637C346.055,40.293 344.805,41.121 343.062,41.121C342.57,41.121 342.07,41.047 341.562,40.898L341.562,38.332L342.078,38.344C342.719,38.344 343.195,38.246 343.508,38.051C343.828,37.856 344.078,37.531 344.258,37.078L344.656,36.035L340.215,23.32L343.859,23.32L346.215,31.207Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M522.699,123.855C522.699,125.535 522.402,127.008 521.808,128.273C521.215,129.539 520.363,130.516 519.254,131.203C518.152,131.891 516.887,132.234 515.457,132.234C514.043,132.234 512.781,131.895 511.672,131.215C510.562,130.535 509.703,129.566 509.094,128.309C508.484,127.043 508.176,125.59 508.168,123.949L508.168,123.105C508.168,121.426 508.469,119.949 509.07,118.676C509.68,117.394 510.535,116.414 511.637,115.734C512.746,115.047 514.012,114.703 515.434,114.703C516.855,114.703 518.117,115.047 519.219,115.734C520.328,116.414 521.184,117.394 521.785,118.676C522.394,119.949 522.699,121.422 522.699,123.094L522.699,123.855ZM519.137,123.082C519.137,121.293 518.816,119.934 518.176,119.004C517.535,118.074 516.621,117.609 515.434,117.609C514.254,117.609 513.344,118.07 512.703,118.992C512.062,119.906 511.738,121.25 511.73,123.023L511.73,123.855C511.73,125.598 512.051,126.949 512.691,127.91C513.332,128.871 514.254,129.352 515.457,129.352C516.637,129.352 517.543,128.891 518.176,127.969C518.808,127.039 519.129,125.688 519.137,123.914L519.137,123.082Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M532.625,130.711C531.789,131.727 530.633,132.234 529.156,132.234C527.797,132.234 526.758,131.844 526.039,131.062C525.328,130.281 524.965,129.137 524.949,127.629L524.949,119.32L528.336,119.32L528.336,127.512C528.336,128.832 528.937,129.492 530.141,129.492C531.289,129.492 532.078,129.094 532.508,128.297L532.508,119.32L535.906,119.32L535.906,132L532.719,132L532.625,130.711Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M542.516,116.203L542.516,119.32L544.684,119.32L544.684,121.805L542.516,121.805L542.516,128.133C542.516,128.602 542.605,128.938 542.785,129.141C542.965,129.344 543.308,129.445 543.816,129.445C544.191,129.445 544.523,129.418 544.812,129.363L544.812,131.93C544.148,132.133 543.465,132.234 542.762,132.234C540.387,132.234 539.176,131.035 539.129,128.637L539.129,121.805L537.277,121.805L537.277,119.32L539.129,119.32L539.129,116.203L542.516,116.203Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M557.984,125.777C557.984,127.73 557.539,129.297 556.648,130.477C555.766,131.648 554.57,132.234 553.062,132.234C551.781,132.234 550.746,131.789 549.957,130.898L549.957,136.875L546.57,136.875L546.57,119.32L549.711,119.32L549.828,120.562C550.648,119.578 551.719,119.086 553.039,119.086C554.601,119.086 555.816,119.664 556.684,120.82C557.551,121.977 557.984,123.57 557.984,125.602L557.984,125.777ZM554.598,125.531C554.598,124.352 554.387,123.441 553.965,122.801C553.551,122.16 552.945,121.84 552.148,121.84C551.086,121.84 550.355,122.246 549.957,123.059L549.957,128.25C550.371,129.086 551.109,129.504 552.172,129.504C553.789,129.504 554.598,128.18 554.598,125.531Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M567.687,130.711C566.851,131.727 565.695,132.234 564.219,132.234C562.859,132.234 561.82,131.844 561.101,131.062C560.391,130.281 560.027,129.137 560.012,127.629L560.012,119.32L563.398,119.32L563.398,127.512C563.398,128.832 564,129.492 565.203,129.492C566.351,129.492 567.141,129.094 567.57,128.297L567.57,119.32L570.969,119.32L570.969,132L567.781,132L567.687,130.711Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
    &lt;path d="M577.578,116.203L577.578,119.32L579.746,119.32L579.746,121.805L577.578,121.805L577.578,128.133C577.578,128.602 577.668,128.938 577.848,129.141C578.027,129.344 578.371,129.445 578.879,129.445C579.254,129.445 579.586,129.418 579.875,129.363L579.875,131.93C579.211,132.133 578.527,132.234 577.824,132.234C575.449,132.234 574.238,131.035 574.191,128.637L574.191,121.805L572.34,121.805L572.34,119.32L574.191,119.32L574.191,116.203L577.578,116.203Z" style="fill:currentColor;fill-rule:nonzero;"/&gt;
&lt;/svg&gt;
&lt;/div&gt;
&lt;section id="input"&gt;
&lt;h4&gt;&lt;a href="#id8"&gt;Input&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Data that need to be processed, can be anything but in our case it is
pixel data, like an image texture, a brushstroke, a procedural noise, ‚Ä¶&lt;/p&gt;
&lt;p&gt;If it is scalar, we don‚Äôt need to decode it. We must specify that we don‚Äôt
want color-transformations by specifying for example the colorspace=‚Äùraw‚Äù.&lt;/p&gt;
&lt;p&gt;If it is color this means that &lt;strong&gt;the data has been mandatorily encoded in a given
colorspace&lt;/strong&gt;. You can hope that this encoding is specified somewhere, like in
the name, in the metadata, ‚Ä¶ But as color-management is a big mess still in
2021 most of the time we will assume that it‚Äôs in sRGB colorspace with
a transfer-function depending on the file format used.&lt;/p&gt;
&lt;p&gt;In sp the Input section can be found on the image slot of each layer.
See &lt;a href="#input-setup-in-sp"&gt;Input Setup in Sp&lt;/a&gt; ..&lt;/p&gt;
&lt;/section&gt;
&lt;section id="workspace"&gt;
&lt;h4&gt;&lt;a href="#id9"&gt;Workspace&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Everything you create, modify go through it. We define how it is configured
so we can always know ‚Äúwhere to go‚Äù when transforming an Input.
In sp this is the ‚ÄúWorking color space‚Äù. In OCIO term it corresponds the
&lt;code&gt;scene_linear&lt;/code&gt; role (also the &lt;code&gt;reference&lt;/code&gt; one).&lt;/p&gt;
&lt;p&gt;Even though sp doesn‚Äôt support OCIO role, it read the
&lt;code&gt;scene_linear&lt;/code&gt; one to use it as the Working Colorspace.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="display"&gt;
&lt;h4&gt;&lt;a href="#id10"&gt;Display&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Once the data has been processed through the Workspace you might want to
preview it. To do so, everybody will be using some kind of hardware display,
usually a computer monitor. This might sound dumb but it is a critical step.
So here we need to convert the Workspace data to Display data, and there is a
lot to do here.&lt;/p&gt;
&lt;p&gt;We can see the Workspace as an ‚Äúopen-domain‚Äù, where data can
be stored in some fancy colorspaces, reach some very high values, ‚Ä¶ (it
can also be closed with data being already closer to the Display domain).
We can then see the Display as a ‚Äúclosed-domain‚Äù, it except a kind of
particularly encoded signal and has limits clearly defined. Knowing the
source (Workspace) we can define the transformations required to convert it
to the target (Display). This involved at his core, colorspace primaries
conversion (if Workspace colorspace is different from the Display ones),
transfer-function encoding/re-encoding (to convert a linear Workspace to
a Display requiring the sRGB transfer-function), and at a more advanced stage,
a dynamic-range conversion (still if required). This last step is usually
called ‚Äútonemapping‚Äù where we try to make the open-domain that is the Workspace
fit into the Display closed-domain.&lt;/p&gt;
&lt;p&gt;Damn that‚Äôs a complicated one, but anyway, what you have to keep in mind is
we are encoding data for a delimited domain defined by the display you are
using.&lt;/p&gt;
&lt;p&gt;In sp the Display section is handled by the &lt;code&gt;view-transform&lt;/code&gt; dropdown, that
you can find at the top-right of your viewport.
See &lt;a href="#display-setup-in-sp"&gt;Display Setup in Sp&lt;/a&gt; .&lt;/p&gt;
&lt;/section&gt;
&lt;section id="output"&gt;
&lt;h4&gt;&lt;a href="#id11"&gt;Output&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;But isn‚Äôt the Display the Output ? Yes, it can be, if you are at the end of the
chain. But here in sp, the end of the chain is our exported texture files. The
Display only allow us to have a preview of how they could look.&lt;/p&gt;
&lt;p&gt;So here, we will encode the Workspace data, has it is required for the next
pipeline step. Encoding will depend on what you need in the next step and what
container (image format) you chose.&lt;/p&gt;
&lt;p&gt;In sp the Output section happens during the textures export process.
See &lt;a href="#output-setup-in-sp"&gt;Output Setup in Sp&lt;/a&gt; .&lt;/p&gt;
&lt;/section&gt;
&lt;section id="example"&gt;
&lt;h4&gt;&lt;a href="#id12"&gt;Example&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To illustrate the theory here is a diagram representing a section of a
potential VFX-pipeline. I hope this will not confuse you more than this topic
already is.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/diagramB.jpg"&gt;&lt;img alt="Color-managed pipeline example diagram" src="https://mrlixm.github.io/static/images/blog/0008/diagramB.jpg" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Example of a color-managed pipeline with various colorspace configuration
used for each section.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;I voluntary chose different colorspace across departments and sections to
accentuate potential transformations.&lt;/li&gt;
&lt;li&gt;It has been chose to work with ACES for the color-management.&lt;/li&gt;
&lt;li&gt;Let‚Äôs assume all the users working on this pipeline have access to the
same display which is a DCI-P3 calibrated monitor.&lt;/li&gt;
&lt;/ul&gt;
&lt;aside class="m-block m-danger"&gt;
&lt;h3&gt;Substance Painter&lt;/h3&gt;
&lt;p&gt;If we look at the Substance Painter department, we can see that our workspace
is &lt;code&gt;linear - sRGB&lt;/code&gt;. The artist decided to not bother working with &lt;code&gt;ACEScg&lt;/code&gt;
colorspace but instead is using &lt;code&gt;sRGB&lt;/code&gt; primaries.
This means that for the Display, the chain of color-transformation is the
following :&lt;/p&gt;
&lt;pre&gt;linear - sRGB &amp;gt; linear - ACES 2065-1 + ACES RRT &amp;gt; 2.6 gamma - DCI-P3&lt;/pre&gt;
&lt;div class="m-row"&gt;
&lt;div class="m-container-inflate m-col-l-4 m-left-l"&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-odt-p3.png"&gt;&lt;img alt="sp view-transform set to ACES - P3-D60" src="https://mrlixm.github.io/static/images/blog/0008/sp-odt-p3.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Located at the top-right of the viewport&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div class="m-col-l-8"&gt;
And all of these transformation are magically handled by the OCIO
config, the artist only specify what display is he using by
modifying the view-transform colorspace.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We finally export the textures in the same Workspace colorspace.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-primary"&gt;
&lt;h3&gt;Maya&lt;/h3&gt;
&lt;p&gt;
Now we are in Maya. We need to apply the textures on the asset and the
end goal is to create a render out of it.
The Workspace is now &lt;code&gt;ACEScg&lt;/code&gt; .
This mean we need to convert our texture which are in sRGB to this
colorspace. The Display is the same, only the source colorspace
change, which is now ACEScg.&lt;br /&gt;
Let‚Äôs skip quickly to the last department.&lt;br /&gt;
&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-warning"&gt;
&lt;h3&gt;Nuke&lt;/h3&gt;
&lt;p&gt;Nuke keep the same Workspace as Maya, as our Input render is already in ACEScg
we don‚Äôt need conversion. As this is the end of the pipeline we have a few
more possibilities here for the Output. Here we want to also be able to
see the composited render on an sRGB Display. As such this mean the
Output needs to be encoded for an sRGB Display, we cannot use the Output
encoded for a DCI-P3 Display.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;p&gt;You made it yay ! Color-science is a complex topic, so don‚Äôt worry if you
don‚Äôt get everything the first time. You will find additional resources to
continue your exploration at the end of this article.&lt;/p&gt;
&lt;p&gt;Now, let‚Äôs put into practice the theory ‚Ä¶&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="substance-setup-workflow"&gt;
&lt;h2&gt;&lt;a href="#id13"&gt;Substance Setup &amp;amp; Workflow&lt;/a&gt;&lt;/h2&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-legacy.png"&gt;&lt;img alt="New project window with color-management tab" src="https://mrlixm.github.io/static/images/blog/0008/sp-project-legacy.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Color-management is not application-dependent but project-dependant.
As such, you will not find any options in the applications settings but in
project ones.&lt;/p&gt;
&lt;section id="new-project"&gt;
&lt;h3&gt;&lt;a href="#id14"&gt;New Project&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first occurrence of these new options can be found on the &lt;code&gt;New project&lt;/code&gt;
window. You will find a &lt;code&gt;Color Management&lt;/code&gt; sub-menu at the bottom.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-cm-options.png"&gt;&lt;img alt="New project window with color-management tab" src="https://mrlixm.github.io/static/images/blog/0008/sp-project-cm-options.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;aside class="m-note m-info"&gt;
You can change all the color-management settings at any moment in
the project settings. Keep in mind that big changes could break your
project though.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;You will be offered between two modes &lt;code&gt;Legacy&lt;/code&gt; and &lt;code&gt;OpenColorIO&lt;/code&gt;.
&lt;code&gt;Legacy&lt;/code&gt; corresponds to the pre-release way sp was working with. We will
skip this mode as it is not useful anymore.&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
Even if you don‚Äôt need to use any specific OCIO config, substance offer a
default one for the sRGB workflow which made &lt;strong&gt;the OCIO mode recommended
to use.&lt;/strong&gt;&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="ocio-config"&gt;
&lt;h3&gt;&lt;a href="#id15"&gt;OCIO config&lt;/a&gt;&lt;/h3&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-OCIO-01.png"&gt;&lt;img alt="New project window with OCIO options" src="https://mrlixm.github.io/static/images/blog/0008/sp-project-OCIO-01.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;But wait, wait ‚Ä¶ what is OCIO ? Why should I use it ?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opencolorio.readthedocs.io"&gt;OCIO&lt;/a&gt;
is a color-management solution developed originally by Sony Picture Imageworks
aiming at enforcing color-management consistency between DCCs.
I recommend &lt;a href="https://opencolorio.readthedocs.io/en/latest/concepts/overview/overview.html"&gt;having a read at the documentation&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;OCIO itself only define standards of utilisation and give you the tools to work
but the core of the system is the &lt;strong&gt;OCIO config&lt;/strong&gt; (a &lt;code&gt;.ocio&lt;/code&gt; file).
This is where all the color-transforms and options are defined.
For example, ACES is a color-management system on his own but ship a version
through OCIO.&lt;/p&gt;
&lt;p&gt;The main advantage is that OCIO is supported by most software (even if the
implementation wildly differs between each üò¨ ) so you could get the same look
through all of your DCCs (in theory).&lt;/p&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;p&gt;For our convenience sp already ships with 3 OCIO configs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Substance&lt;/li&gt;
&lt;li&gt;ACES 1.0.3&lt;/li&gt;
&lt;li&gt;ACES 1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find them in the sp installation folder like this one :&lt;/p&gt;
&lt;pre class="m-code"&gt;C:\Program Files\Allegorithmic\Adobe Substance 3D Painter\resources\ocio&lt;/pre&gt;
&lt;p&gt;Honestly, I don‚Äôt know why did they include two ACES versions, only the last
one was needed, but it is awesome to have a default ‚ÄúSubstance‚Äù config.&lt;/p&gt;
&lt;p&gt;
Lot of flexibility here. First option is to use the shipped configs.
In my opinion only the &lt;code&gt;Substance&lt;/code&gt; config is interesting here.&lt;br /&gt;
The 2 ACES ones are the ‚Äúdefault‚Äù dev configs with the hundred of
colorspaces you will never need. It is better to use a lightweight ACES
config like &lt;a href="https://caveacademy.com/product/cave-cg-animation-aces-ocio-config/"&gt;the one from CAVE academy&lt;/a&gt;. (see &lt;a href="#aces-workflow"&gt;ACES Workflow&lt;/a&gt;
section)&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Substance&lt;/code&gt; config will be a good fit if you are using the traditional
sRGB linear workflow and do not wish to use an OCIO config in every DCC.
You will still have enough control to have a proper color-managed workflow.&lt;/p&gt;
&lt;p&gt;Let‚Äôs now see how you could load a custom OCIO config.&lt;/p&gt;
&lt;section id="custom-config"&gt;
&lt;h4&gt;&lt;a href="#id16"&gt;Custom config&lt;/a&gt;&lt;/h4&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-custom.png"&gt;&lt;img alt="New project window with OCIO option set with a custom config." src="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-custom.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;The first option is to use the &lt;code&gt;Custom&lt;/code&gt; option and manually look for
the path to the &lt;code&gt;config.ocio&lt;/code&gt; file on your disk.&lt;/p&gt;
&lt;aside class="m-block m-warning"&gt;
&lt;h3&gt;Only a reference to the config path is saved in the project.&lt;/h3&gt;
&lt;p&gt;When submitting a OCIO config through the &lt;code&gt;Custom&lt;/code&gt; option, &lt;strong&gt;the
config is always loaded live from the disk&lt;/strong&gt;.
This means if you share a substance project with
someone that doesn‚Äôt have the OCIO config at the exact same path, you will
see this message pop up :&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-custom-error.png"&gt;&lt;img alt="Error window when the custom config can't be found." src="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-custom-error.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;See the bottom section &lt;a href="#substance-parameters-for-ocio-configs"&gt;Substance parameters for OCIO configs&lt;/a&gt; to continue
the setup.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="environment-variable"&gt;
&lt;h4&gt;&lt;a href="#id17"&gt;Environment variable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The above might be enough for individual artists but being in a pipeline
environment requires other ways to set OCIO automatically.&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
If the OCIO environment variable is present and has a valid configuration
file it will take over to override and disable the UI settings.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;On Windows you have 2 ways to set environment variables :&lt;/p&gt;
&lt;section id="global-settings"&gt;
&lt;h5&gt;&lt;a href="#id18"&gt;Global Settings&lt;/a&gt;&lt;/h5&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/ocio-env-global.png"&gt;&lt;img alt="Windows creating the OCIO environment variable." src="https://mrlixm.github.io/static/images/blog/0008/ocio-env-global.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;You create a new variable named OCIO with the path to the config.
This variable will be used by ALL software that can read it. (unless
overridden).&lt;/p&gt;
&lt;p&gt;This is not a recommended solution as you pollute your environment variable
+ if you decide to switch the config for another one all your previous project
will be broken.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="set-locally-at-startup"&gt;
&lt;h5&gt;&lt;a href="#id19"&gt;Set locally at startup&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;You defined the environment variable in a start-up script.
This is the cleanest way to do it but means you can‚Äôt use the Windows shortcut
to start your software :&lt;/p&gt;
&lt;p&gt;We use a &lt;code&gt;.bat&lt;/code&gt; to configure and launch the software. Here is a basic &lt;code&gt;.bat&lt;/code&gt;
that will set the OCIO variable and then launch sp.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;OCIO=C:\aces_1.1\config.ocio&amp;quot;&lt;/span&gt;

start &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C:\Program Files\Allegorithmic\Adobe Substance 3D Painter\Adobe&lt;/span&gt;
&lt;span class="s2"&gt;Substance 3D Painter.exe&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;aside class="m-note m-default"&gt;
To create a &lt;code&gt;.bat&lt;/code&gt; just create a new &lt;code&gt;.txt&lt;/code&gt; file, paste the above code,
modify it with the path to your config, save it, and then just replace
the &lt;code&gt;.txt&lt;/code&gt; with &lt;code&gt;.bat&lt;/code&gt; in the file‚Äôs name.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;
This means that to launch Substance you will have to always use this .bat.
No ‚Äúdouble-clicking‚Äù on file to open them either.&lt;br /&gt;
You can have a look on internet at &lt;a href="https://superuser.com/questions/656611/how-to-pin-a-batch-file-to-the-taskbar-quicklaunch/656649"&gt;how to pin a .bat to the taskbar&lt;/a&gt; .&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;But this guarantees a very robust software configuration per project.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="substance-parameters-for-ocio-configs"&gt;
&lt;h4&gt;&lt;a href="#id20"&gt;Substance parameters for OCIO configs&lt;/a&gt;&lt;/h4&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-options.png"&gt;&lt;img alt="Options for OCIO mode in sp.." src="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-options.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;OCIO with Substance config default settings.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It corresponds to all the sections below the color-management mode. It allows
to configure how inputs react with the OCIO config, i.e which colorspace is
being assigned by default.&lt;/p&gt;
&lt;p&gt;Usually, in other software, this section is configured using the &lt;a href="https://opencolorio.readthedocs.io/en/latest/guides/authoring/overview.html#roles"&gt;OCIO roles&lt;/a&gt; defined in the OCIO configuration.
&lt;span class="m-text m-danger"&gt;But currently sp support only its own OCIO roles.&lt;/span&gt; Which mean
&lt;span class="m-text m-danger"&gt;you might have to manually setup this section&lt;/span&gt; to get a correct
result with the auto settings OR make sure the OCIO config you are using
have the OCIO roles supported by Sp.&lt;/p&gt;
&lt;p&gt;If you look at the above image, this is how it is supposed to look when picking
the Substance config. As the Substance config have the supported OCIO roles
defined, the parameters are properly configured.&lt;/p&gt;
&lt;p&gt;But if you are loading a custom config, make sure these options are properly
configured with the intended colorspaces for each format if you want all the
&lt;code&gt;auto&lt;/code&gt; options to work properly. Most of them (except Export ones) can be
changed in context in last resort.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="#aces-workflow"&gt;ACES Workflow&lt;/a&gt; section to find how this should be considered if you
are using the ACES config.&lt;/p&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;p&gt;Since 7.4.2 you can also find a new &lt;code&gt;Standard sRGB color space&lt;/code&gt; parameter
which is a very nice add for having UI elements properly managed. If the name
doesn‚Äôt looks clear, it correspond to the &lt;code&gt;sRGB - Display encoded&lt;/code&gt;
colorspace. From the documentation, it is used :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To convert color set in the hexadecimal field of the color picker.&lt;/li&gt;
&lt;li&gt;To save and load color swatches within the color picker.&lt;/li&gt;
&lt;li&gt;To be listed as a Display in the color picker list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This update also adds support for specific OCIO role which are the following :&lt;/p&gt;
&lt;pre class="m-code"&gt;substance_3d_painter_bitmap_import_8bit
substance_3d_painter_bitmap_import_16bit
substance_3d_painter_bitmap_import_floating
substance_3d_painter_bitmap_export_8bit
substance_3d_painter_bitmap_export_16bit
substance_3d_painter_bitmap_export_floating
substance_3d_painter_substance_material&lt;/pre&gt;
&lt;p&gt;Check &lt;a href="https://substance3d.adobe.com/documentation/spdoc/color-management-with-opencolorio-225969419.html#section3"&gt;the Substance‚Äôs OCIO documentation&lt;/a&gt; for more details but make sure your OCIO config have these
fellas set with the corresponding colorspace if you want it to be properly
read in Sp.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="new-project-conclusion"&gt;
&lt;h3&gt;&lt;a href="#id21"&gt;New Project : Conclusion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Alright, to recap‚Äô everything for a new project you need :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change the color-management mode to OCIO&lt;/li&gt;
&lt;li&gt;Choose the OCIO config (already chosen if env variable set)&lt;/li&gt;
&lt;li&gt;Check the OCIO options to have the correct default colorspaces working.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And of course, setting the other parameters related to your texturing.&lt;/p&gt;
&lt;p&gt;Now you are good to start the texturing workflow. The workflow will be
divided into the same sections explained in the theoretical part of this
article (see &lt;a href="#color-managed-workflow"&gt;Color-managed Workflow&lt;/a&gt;).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="workspace-setup-in-sp"&gt;
&lt;h3&gt;&lt;a href="#id22"&gt;Workspace Setup in Sp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Workspace, in software is actually an ‚Äúabstract‚Äù section. It just
represents the colorspace used as a reference, target or source for every color
transformation. It is defined in the OCIO config and cannot be changed outside
of it.&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
In the OCIO config it corresponds to the &lt;code&gt;scene_linear&lt;/code&gt; role.&lt;/aside&gt;
&lt;/aside&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-workspace.png"&gt;&lt;img alt="The Working Colorspace displayed in the Color-management tab." src="https://mrlixm.github.io/static/images/blog/0008/sp-project-ocio-workspace.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Visible in the Project‚Äôs Color-management section (Using the ACES 1.2 OCIO
config here)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It is just good to know what is the colorspace being used here.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="display-setup-in-sp"&gt;
&lt;h3&gt;&lt;a href="#id23"&gt;Display Setup in Sp&lt;/a&gt;&lt;/h3&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-odt-default.png"&gt;&lt;img alt="View-transform screenshot." src="https://mrlixm.github.io/static/images/blog/0008/sp-odt-default.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;A good first step before working is to make sure the Display part is
properly configured so you don‚Äôt start texturing while viewing the wrong
colors. This Display part can be configured using what we usually called a
&lt;cite&gt;view-transform&lt;/cite&gt; menu. In sp, you can find it at the top-right of your
viewport.&lt;/p&gt;
&lt;p&gt;What you have to remember is that &lt;span class="m-text m-primary"&gt;you need to choose the option
that corresponds to your display.&lt;/span&gt; If your display is calibrated to the
Display P3 colorspace (Apple displays), choose the Display P3 option.&lt;/p&gt;
&lt;p&gt;But what if I don‚Äôt know what my display is calibrated to ?&lt;/p&gt;
&lt;blockquote&gt;
A safe choice would be to assume you are using an sRGB-like display.&lt;/blockquote&gt;
&lt;p id="the-rec709-transfer-function-issue"&gt;I see some people using Rec.709 instead of sRGB, why ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sRGB and Rec.709 share the same primaries, so you can use both without
seeing color-shift due to different primaries. What does change is the
transfer function being used. But fasten your seat-belt, here comes the
mess : Rec.709 only defined an &lt;abbr title="opto-electrical transfer function"&gt;OETF&lt;/abbr&gt;
which is intended for camera signal encoding, not data display encoding !
For display encoding with the Rec.709 colorspace, one should use the
&lt;a href="https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.1886-0-201103-I!!PDF-E.pdf"&gt;BT.1886&lt;/a&gt;
standard which can be resumed as a simple 2.4
&lt;abbr title="= gamma"&gt;power-function&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;So how to know which one of these two is being used ? Simple, if when
compared to sRGB, the image looks darker, it‚Äôs the OETF, if it‚Äôs looking
less contrasty, it‚Äôs BT.1886.&lt;/p&gt;
&lt;p&gt;If you do the test, the Substance config use the OETF (which should not
be used), while the ACES config uses BT.1886.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You didn‚Äôt answer my question !? I‚Äôm just more confused now !&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As written previously, you need to choose the option that corresponds to
your display, so if your display is not calibrated to Rec.709+BT.1886
don‚Äôt use it. But some people like the look of it, being less contrasty,
that‚Äôs why it‚Äôs being chosen. But the display should not be a creative
choice. If you like a less contrasty look, you should apply it in the Look
(see under).&lt;/p&gt;
&lt;p&gt;Just to add more confusion, the BT.1886 difference with sRGB can
actually be used as a viewing environment compensation. So it can actually
justify why using Rec709+BT.1886 instead of sRGB.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyways, I‚Äôm going too far from the subject, and someone already
wrote about this topic, I let you read this mind-blowing article from
Chris Brejon &lt;a href="https://chrisbrejon.com/articles/ocio-display-transforms-and-misconceptions/"&gt;OCIO, Display Transforms and Misconceptions&lt;/a&gt;.&lt;/p&gt;
&lt;section id="displaying-color-and-scalar-data"&gt;
&lt;h4&gt;&lt;a href="#id24"&gt;Displaying Color and Scalar data&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Sp will handle it for you automatically, depending on the channel you
are previewing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://substance3d.adobe.com/documentation/spdoc/color-management-223053233.html#section5"&gt;The full list of color-managed channels is available here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For example, selecting the Roughness channel for preview will disable the
view-transform :&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-odt-off.png"&gt;&lt;img alt="View-transform screenshot, when scalar data is selected." src="https://mrlixm.github.io/static/images/blog/0008/sp-odt-off.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;If you are using a custom &lt;code&gt;User&lt;/code&gt; channel, you will have to manually
specify if the channel is color-managed though. (By default they are not)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="input-setup-in-sp"&gt;
&lt;h3&gt;&lt;a href="#id25"&gt;Input Setup in Sp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Texturing is all about mixing already existing images, with some carefully
crafted paint stroke, and funky procedural resources. All of these, if they
are color-data, have been created and saved with a specific colorspace.
We will need to know and then specify this colorspace to sp so the OCIO
processor can know if it needs conversion to the Workspace colorspace.&lt;/p&gt;
&lt;section id="shelf-resources"&gt;
&lt;h4&gt;&lt;a href="#id26"&gt;Shelf Resources&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In Sp this manipulation takes place, weirdly, on the images slots of each
layer. You will not find any option to specify the colorspace in the shelf.&lt;/p&gt;
&lt;div class="l-flex-r l-flex-start l-gap-1"&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-in-bobross-7.4.2.png"&gt;&lt;img alt="Screenshots of the Input colorspace option for layers." src="https://mrlixm.github.io/static/images/blog/0008/sp-in-bobross-7.4.2.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Updated menu design on versions 7.4.2 +&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-in-menudisplay.png"&gt;&lt;img alt="Screenshots of the Input colorspace option for layers." src="https://mrlixm.github.io/static/images/blog/0008/sp-in-menudisplay.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;If the menu is not visible, you can toggle it just above.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
By default, it is set to &lt;code&gt;auto&lt;/code&gt;, which will use the settings specified in
the project color-management menu explained above.&lt;br /&gt;
(&lt;a href="#substance-parameters-for-ocio-configs"&gt;Substance parameters for OCIO configs&lt;/a&gt;).&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;I recommend always modifying this option to the proper colorspace to be sure
the resource is properly color-managed.&lt;/p&gt;
&lt;p&gt;Another option is to have the source colorspace specified in the file name.
That‚Äôs in my opinion a bit messy because the colorspace has to be the exact
name used in the config. If 2 configs used a different name, your image will
only work for one. If I take for example a colorspace name used in the ACES
config this could give: &lt;code&gt;bricks_wall_albedo_Utility - Linear - sRGB.exr&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-color-picker"&gt;
&lt;h4&gt;&lt;a href="#id27"&gt;The color-picker&lt;/a&gt;&lt;/h4&gt;
&lt;aside class="m-note m-info"&gt;
&lt;p&gt;7.4.2 update changed the behavior of the color-picker with huge
improvements :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swapped working and display space for the widgets, the &lt;code&gt;eds&lt;/code&gt; is now
expressed in the display space specified by the &lt;code&gt;tcd&lt;/code&gt; and you can
have a look at the working colorspace value just under.&lt;/li&gt;
&lt;li&gt;Color-picker behavior is more consistent overall .&lt;/li&gt;
&lt;li&gt;You will also notice that the &lt;code&gt;tcd&lt;/code&gt; disapear when picking color in a
scalar channel/role (which is logic).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following section has been updated to reflect the change and &lt;strong&gt;will
not be valid for version under 7.4.2&lt;/strong&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;div class="l-flex-r l-flex-start l-gap-1"&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-colorpicker.png"&gt;&lt;img alt="Screenshot of the color picker." src="https://mrlixm.github.io/static/images/blog/0008/sp-colorpicker.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="l-flex-shrink-2"&gt;
&lt;p&gt;As used as feared by artists. It never react how the artist wants
and looks to be made out of dark magic (at least in Mari üôÉ ).
Did the sp implementation bring any good news ? Let‚Äôs see.&lt;/p&gt;
&lt;p&gt;Abbreviations used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tcd&lt;/code&gt; : top colorspace dropdown&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eds&lt;/code&gt; : editable sliders, where you can manually enter your color
components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good feature is the little info icon, giving explicit
info on how the widget works. If we have a look at the info message
next to the &lt;code&gt;tcd&lt;/code&gt; we can read :&lt;/p&gt;
&lt;blockquote&gt;
Color mixing space, this is the space in which a color is edited
before being converted into the working color space. It usually
matches the monitor to be easily viewed.&lt;/blockquote&gt;
&lt;p&gt;Which means the values in the &lt;code&gt;eds&lt;/code&gt; are in the colorspace
specified by the &lt;code&gt;tcd&lt;/code&gt;, then they are converted to the working
colorspace. (you can check the result of this conversion just under.)&lt;/p&gt;
&lt;p&gt;This is a valid workflow, which allow you to get the same color seen
in the UI on the final textures.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But keep in mind that you have to be careful on the color
you are chosing, the fact that it looks as you want (perceptual)
doesn‚Äôt mean the scene-refered values (working colorspace) have a
physically plausible value. For exemple, in an ACES workflow you might want
to make sure that no channel‚Äôs value goes up to 1.0, which mean you are
reaching the boundary of the ACEScg gamut which is comparable to a laser‚Äôs
color.&lt;/p&gt;
&lt;aside class="m-note m-info"&gt;
&lt;p&gt;Ideally the &lt;code&gt;tcd&lt;/code&gt; and the view-transform should use the same
colorspace. This is especially true if you are using the actual picker.
Unless you need to enter specific value you already know
which colorspae they are encoded in.&lt;/p&gt;
&lt;p&gt;Luckily, this is already done automatically. Change the
view-transform and you will see the &lt;code&gt;tcd&lt;/code&gt; update to reflect the change !&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;p id="picker"&gt;What about the actual picker ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The picker will pick the value at display, so with the view-transform
applied (if not disabled). Consider this as the input, and will convert
from the &lt;code&gt;tcd&lt;/code&gt; colorspace to the working colorspace. You then get
back ‚Äúnearly‚Äù the same value (with some math precisions issue ).&lt;/p&gt;
&lt;p&gt;What I recommend though, is to change the view-transform to a
‚Äúno-operation‚Äù colorspace (usually called &lt;code&gt;raw&lt;/code&gt;), pick the color, and
re-apply the previous view-transform. This will avoid the
potential colorspace invertibility and imprecisions issues.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-colorpicker-picker.gif"&gt;&lt;img alt="GIF showing the trick explained above." src="https://mrlixm.github.io/static/images/blog/0008/sp-colorpicker-picker.gif" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Using Filmic config, original value is RGB(1,0.5,0).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;aside class="m-note m-info"&gt;
The color-picker is unfortunately clamped between the 0-1 range, which is
at the same time ok because for texturing you usually want to avoid
values to goes outside this range, but also means color-picking operation
are clamped which create inconsistency for some of them yielding result
above 1.&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-note m-warning"&gt;
Sometimes, when switching colorspaces in the &lt;code&gt;tcd&lt;/code&gt;, some UI elements
like the  &lt;code&gt;eds&lt;/code&gt; will not update and you might have to move the sliders
slightly to force an update.&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;Hexadecimal&lt;/h3&gt;
&lt;p&gt;If you need to enter hexadecimal values, the field will assume they are ‚Äú
sRGB-Display‚Äú encoded and use the &lt;code&gt;Standard sRGB color space&lt;/code&gt; defined
in the config to convert it to the working color-space.
(Field that seems to be bugged, I can‚Äôt edit edit it, only copy/paste
value inside).&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-warning"&gt;
&lt;h3&gt;OCIO v2 issue&lt;/h3&gt;
&lt;p&gt;Seems the OCIO v2 feature called ‚Äúshared views‚Äù is not supported properly
by the color-picker. If you use a ‚Äúcolorspace‚Äù (actually a &lt;code&gt;display
view&lt;/code&gt;) which make use of a shared view (using &lt;code&gt;&amp;lt;Views&amp;gt;&lt;/code&gt;), the widget
displaying the working colorspace values will disapear.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-block m-info"&gt;
&lt;h3&gt;Swatches&lt;/h3&gt;
&lt;p&gt;You can save colors as swatches for easier re-use. Quoting from the
&lt;a href="https://substance3d.adobe.com/documentation/spdoc/color-picker-220857079.html#section7"&gt;swatches documentation&lt;/a&gt; :
&lt;code&gt;Swatch color are managed and saved as sRGB colors, whatever the current
color management configuration is set to&lt;/code&gt;. The steps are as follow :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;saving&lt;/code&gt; : &lt;code&gt;working colorspace&lt;/code&gt; converted to &lt;code&gt;sRGB standard
colorspace&lt;/code&gt; then converted to hexadecimal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importing&lt;/code&gt; : &lt;code&gt;sRGB standard colorspace&lt;/code&gt; converted to &lt;code&gt;working colorspace&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No matter how the &lt;code&gt;tcd&lt;/code&gt; is set this is how it works EXCEPT if the &lt;code&gt;tcd&lt;/code&gt;
is set to a scalar colorspace (&lt;code&gt;isdata=true&lt;/code&gt; in the config). In that case
and as expected the swatch is imported without conversion so straight
hexadecimal to RGB values (which doesn‚Äôt looks like the original color of
course.)&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-colorpicker-infograph.jpg"&gt;&lt;img alt="Color-picker infographic." src="https://mrlixm.github.io/static/images/blog/0008/sp-colorpicker-infograph.jpg" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Small infographic to resume colorspace transformations.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So I must say that the latest update have greatly improved the color-picking
experience which behave a bit more as you would except. Cool stuff !
Looking forward to next updates to reach the perfect color-picking
experience haha.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="environment"&gt;
&lt;h4&gt;&lt;a href="#id28"&gt;Environment&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span class="m-text m-s l-c-color-6"&gt;There is no direct option to modify the environment image colorspace.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From 7.4.2 + you can find an option in the &lt;code&gt;Display Settings&lt;/code&gt; Menu, to change
the environment colorspace being used.&lt;/p&gt;
&lt;p&gt;For the other versions you still have the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify the default &lt;code&gt;Linear&lt;/code&gt; colorspace in the project settings. The
environments maps will use it.&lt;/li&gt;
&lt;li&gt;Include the source colorspace in the name of the HDRI. It has to be the
&lt;strong&gt;exact same name&lt;/strong&gt; as defined in the config. Example :
&lt;code&gt;myhdri_ACES - ACEScg.exr&lt;/code&gt;. (you can find an example in &lt;a href="#aces-environment"&gt;ACES -
Environment&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;aside class="m-note m-info"&gt;
The pre-integrated HDRIs are encoded with a &lt;code&gt;linear - sRGB&lt;/code&gt;-like colorspace.&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="masks"&gt;
&lt;h4&gt;&lt;a href="#id29"&gt;Masks&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;When you right-click on a mask you have the option to &lt;code&gt;Export mask as File&lt;/code&gt;.
Don‚Äôt worry, mask seems to always be considered as scalar and exported
without any treatment.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="output-setup-in-sp"&gt;
&lt;h3&gt;&lt;a href="#id30"&gt;Output Setup in Sp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Export Textures window didn‚Äôt got much new. We doesn‚Äôt have any options
to apply a color-transformation at export time in the Window. The only options
are the one available into the project settings.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-project-export.png"&gt;&lt;img alt="Sp project settings export options." src="https://mrlixm.github.io/static/images/blog/0008/sp-project-export.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Basically, integer format should be sRGB display encoded. Floating point format
should use the same working colorspace.&lt;/p&gt;
&lt;p&gt;What‚Äôs new though is the &lt;code&gt;$colorspace&lt;/code&gt; token in the Output Templates tab.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-export-template.png"&gt;&lt;img alt="Sp Export window, Output template tab." src="https://mrlixm.github.io/static/images/blog/0008/sp-export-template.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Which is simply replaced by the colorspace defined in the project settings.
(You can have a preview of the file name in the &lt;code&gt;LIST OF EXPORT&lt;/code&gt; tab).&lt;/p&gt;
&lt;p&gt;I‚Äôm personaly not fan of this option as this might introduce special characters
in the file‚Äôs name, depending on how the colorspace is named. It is, I think,
a better option to have the texture name without the colorspace, but exported
in a directory with the colorspace name.&lt;/p&gt;
&lt;p&gt;For scalar channels, sp will not apply any color-transformation
and consider them using the colorspace &lt;code&gt;raw&lt;/code&gt; (no matter the config).
Interstingly, this colorspace &lt;code&gt;raw&lt;/code&gt; doesn‚Äôt get written into the
&lt;code&gt;$colorspace&lt;/code&gt; token as it should. &lt;em&gt;(fixed in 7.4.1)&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="aces-workflow"&gt;
&lt;h2&gt;&lt;a href="#id31"&gt;ACES Workflow&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I‚Äôm not going to get into the what and the why, only the how. Let‚Äôs keep the
rest for a next (potential) article ?&lt;/p&gt;
&lt;section id="aces-config-setup"&gt;
&lt;h3&gt;&lt;a href="#id32"&gt;ACES - Config setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You could use the one shipped with Substance but I wouldn‚Äôt recommend so.
They are the ones with the hundred colorspaces that will just slow you down
when you need to choose one.&lt;/p&gt;
&lt;p&gt;Instead, it would be smarter to use a config with only what you need like
&lt;a href="https://caveacademy.com/product/cave-cg-animation-aces-ocio-config/"&gt;the one from CAVE academy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then you will need to configure the default colorspaces. Using the Cave config
(which have the same nomenclature as the official ACES ones) here is what I
recommend :&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-aces-project.png"&gt;&lt;img alt="Substance project window with ACES setuped properly." src="https://mrlixm.github.io/static/images/blog/0008/sp-aces-project.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Import settings are the usual stuff, most of the 8bit texture, if not all
are sRGB display encoded files so &lt;code&gt;Utility - sRGB - Texture&lt;/code&gt; correspond.
Floating point images like EXRs should always be linear so the alternative
version &lt;code&gt;Utility - Linear - sRGB&lt;/code&gt; is the right choice. Remember these options
are just applied by default (with the &lt;code&gt;auto&lt;/code&gt; colorspace) but can be
changed anytime.&lt;/p&gt;
&lt;p&gt;I choose &lt;code&gt;Utility - sRGB - Texture&lt;/code&gt; for &lt;code&gt;Substance materials&lt;/code&gt; because
it seems the output is always sRGB display encoded as the screenshot under
show. (colorspace options can be modified on the material anyway).&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-mat-colorspace.png"&gt;&lt;img alt="Substance viewport screenshot with different default for materials." src="https://mrlixm.github.io/static/images/blog/0008/sp-mat-colorspace.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Model by &lt;a href="https://www.artstation.com/ashimara"&gt;Emmanuel-Xu√¢n Dubois&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now for the output my choice is not the only option. To me, you shouldn‚Äôt
export ACEScg 8bit files, that why I re-encode them back to sRGB by using
&lt;code&gt;Utility - sRGB - Texture&lt;/code&gt;. The right option is to export EXRs (floating
point images) in the same working colorspace: ACEScg. And don‚Äôt worry for
scalar channel they will be handled automatically at export. These options
are the only ones that can‚Äôt be modified per-case though; this is the only
place you can change them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="aces-what-to-do-when-working"&gt;
&lt;h3&gt;&lt;a href="#id33"&gt;ACES - What to do when working&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I‚Äôm only going to give detailed explanations when something is specific to
ACES. Meanwhile the explanations given in &lt;a href="#substance-setup-workflow"&gt;Substance Setup &amp;amp; Workflow&lt;/a&gt; still
apply so make sure you properly understood this section.&lt;/p&gt;
&lt;section id="aces-display"&gt;
&lt;h4&gt;&lt;a href="#id34"&gt;ACES - Display&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Not much new, use the view-transform that correspond to the display you are
using. (In my case &lt;code&gt;ACES - sRGB&lt;/code&gt;, that behind the scene, uses &lt;code&gt;Output -
sRGB&lt;/code&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="aces-inputs"&gt;
&lt;h4&gt;&lt;a href="#id35"&gt;ACES - Inputs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For every external resource you import, you need to assign the correct
input colorspace if the automatic one doesn‚Äôt correspond. The usual rules
for the ACES workflow apply.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/diagram-aces-idt.jpg"&gt;&lt;img alt="ACES IDT Cheatsheet." src="https://mrlixm.github.io/static/images/blog/0008/diagram-aces-idt.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;section id="aces-environment"&gt;
&lt;h5&gt;&lt;a href="#id36"&gt;ACES - Environment&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;&lt;span class="m-text m-s l-c-color-6"&gt;There is unfortunately no direct options to change environment‚Äôs
colorspace.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From 7.4.2+ you can find an option in the &lt;code&gt;Display Settings&lt;/code&gt; Menu, to change
the environment colorspace being used.&lt;/p&gt;
&lt;p&gt;Environment follow default colorspace rules. Being floating point image
, they will use the pre-defined &lt;code&gt;Utility - Linear - sRGB&lt;/code&gt; colorspace.
So as long as they are &lt;code&gt;sRGB - linear&lt;/code&gt;-like encoded, they will be properly
displayed.&lt;/p&gt;
&lt;p&gt;If that not the case you can use the mentioned override option, but
in the case you are using an older version here is my previous solution :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what if I want to import an already converted ACEScg HDRI ?&lt;/p&gt;
&lt;p&gt;There is a way to have it working. You can specify the colorspace in the
file name. The colorspace has to be &lt;strong&gt;the exact same name&lt;/strong&gt; as the one
defined in the config. An example would be: &lt;code&gt;myhdri_ACES - ACEScg.exr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Left one is sRGB encoded, middle and right ACEScg encoded. Right one
doesn‚Äôt get properly converted and looks shifted.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-aces-hdri-comparison.png"&gt;&lt;img alt="Sp viewport screenshot with hdri comparison." src="https://mrlixm.github.io/static/images/blog/0008/sp-aces-hdri-comparison.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Model and texturing by &lt;a href="https://www.artstation.com/ashimara"&gt;Emmanuel-Xu√¢n Dubois&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="aces-colorpicker"&gt;
&lt;h4&gt;&lt;a href="#id37"&gt;ACES - Colorpicker&lt;/a&gt;&lt;/h4&gt;
&lt;aside class="m-note m-info"&gt;
The screenshots in this section have not been updated to reflect change
in the 7.4.2 update. Explanations still apply.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;Everything in &lt;a href="#the-color-picker"&gt;The color-picker&lt;/a&gt; section applies here. You can just except
more odd behavior as a wider-gamut and more complex view-transform will not
play well with it. The first potential issue that came to my mind is the
combinaison of 0-1 clamping + ACES ODT : If you are picking a pure value of
RGB(1,1,1) considered encoded as &lt;code&gt;Output - sRGB&lt;/code&gt;, you would usually get back
a scene-referred value of RGB(16.2,16.2,16.2). But the color-picker is
clamped between the 0-1 range so you will end up with just RGB(1,1,1).&lt;/p&gt;
&lt;p&gt;Then consider the following example :&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-aces-colorpicker.png"&gt;&lt;img alt="Substance colorpicker with ACES workflow." src="https://mrlixm.github.io/static/images/blog/0008/sp-aces-colorpicker.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Model by &lt;a href="https://www.artstation.com/ashimara"&gt;Emmanuel-Xu√¢n Dubois&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I have an ACEScg value of (1,0,0) which is damn too saturated
and no object except laser are that saturated.&lt;/p&gt;
&lt;aside class="m-note m-warning"&gt;
This mean you have to be careful
when picking values, and always keep a look at the scene-refered ACEScg
values.&lt;/aside&gt;
&lt;/aside&gt;
&lt;p&gt;What if I want to apply a color we gave me as hexadecimal ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider my brand‚Äôs green picked from &lt;a class="m-link-wrap" href="https://coolors.co"&gt;https://coolors.co&lt;/a&gt; .&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-aces-colorpicker-hex.png"&gt;&lt;img alt="Substance colorpicker with ACES workflow." src="https://mrlixm.github.io/static/images/blog/0008/sp-aces-colorpicker-hex.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Well ‚Ä¶ the less brain-damaging solution would be to just eyeball the
color.&lt;/p&gt;
&lt;p&gt;Luckily, the 7.4.2 update made thing easier for us. The hexadecimal color
will assume to be encoded in the &lt;code&gt;sRGB standard colorspace&lt;/code&gt; and converted
to the working colorspace. So just copy/paste your color in the hexadecimal
field and you should have your color converted.&lt;/p&gt;
&lt;p&gt;Even with this, you might notice that the color is still not similar to
the sRGB one. This is normal and inherent to the ACES ODT which apply a
‚Äúcreative‚Äù and ‚Äútechnical‚Äù transformation on display.&lt;/p&gt;
&lt;p&gt;So keep this in mind: &lt;span class="m-text m-primary"&gt;you will never be able to match the look
of the sRGB workflow with the ACES workflow.&lt;/span&gt; (unless cheating).&lt;/p&gt;
&lt;p&gt;I‚Äôm not going to dive into further explanations as there is &lt;a href="https://community.acescentral.com/t/preserving-logos-and-graphics-in-aces/2861"&gt;enough
ACES central threads&lt;/a&gt;  on this subject
and Chris &lt;a href="https://chrisbrejon.com/cg-cinematography/chapter-1-5-academy-color-encoding-system-aces/#inverted-odt-workflow"&gt;is also explaining it here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="aces-output"&gt;
&lt;h4&gt;&lt;a href="#id38"&gt;ACES - Output&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Do yourself a favour here and only care about EXR. &lt;a href="https://www.elsksa.me/scientia/cgi-offline-rendering/file-format-debunk"&gt;You don‚Äôt need anything
else&lt;/a&gt; and this is the file format recommended by the Academy for ACES
data encoding.&lt;/p&gt;
&lt;p&gt;If you choose EXR, you have nothing to care about. Color channel will be
exported in &lt;code&gt;ACEScg&lt;/code&gt; while scalar channel will bypass any
color-transform encoding. Simple as that.&lt;/p&gt;
&lt;p&gt;Reminder that you can choose to remove the &lt;code&gt;$colorspace&lt;/code&gt; token in your
export template map name to avoid unwanted special characters in your file
name. (and instead export the textures in a folder named ACEScg)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="ocio-implementation-issues"&gt;
&lt;h2&gt;&lt;a href="#id39"&gt;OCIO Implementation Issues&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="m-note m-default"&gt;
The goal here is not to denigrate the dev team‚Äôs works but rather to offer
explanations and solutions for improving the software.&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-note m-info"&gt;
The team did a fantastic job in the latest updates by adressing some of
the issues I mentionned !&lt;/aside&gt;
&lt;/aside&gt;
&lt;section id="display-issues"&gt;
&lt;h3&gt;&lt;a href="#id40"&gt;Display Issues&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These explanations were made possible thanks to the Chris Brejon‚Äôs article
&lt;a href="https://chrisbrejon.com/articles/ocio-display-transforms-and-misconceptions/"&gt;OCIO, Display Transforms and Misconceptions&lt;/a&gt;.&lt;/p&gt;
&lt;section id="display-components-mismatch"&gt;
&lt;h4&gt;&lt;a href="#id41"&gt;Display components mismatch&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;OCIO divide the Display section into 3 components :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Display&lt;/code&gt; : the physical hardware you are using (monitor, TV, phone, ‚Ä¶).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View&lt;/code&gt; : a way to encode the data for a specific viewing purpose.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Look&lt;/code&gt; : a creative layer of modification on the data. ex: a grade.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why do I explain you this ? Because these components are often mismatched
or forgotten. Unfortunately, Substance makes no exception here.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-odt-default.png"&gt;&lt;img alt="View-transform screenshot." src="https://mrlixm.github.io/static/images/blog/0008/sp-odt-default.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;If you look at the view-transform screenshot above, you can see that each
option has the &lt;code&gt;Default&lt;/code&gt; prefix.
If we have a look at the &lt;code&gt;config.ocio&lt;/code&gt; file from the Substance config,
we can see why :&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/config-substance-displays.png"&gt;&lt;img alt="Screenshot of the displays part of the Substance Ocio config." src="https://mrlixm.github.io/static/images/blog/0008/config-substance-displays.png" /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p&gt;What should be a &lt;code&gt;display&lt;/code&gt; or a separate &lt;code&gt;view&lt;/code&gt; is actually all merged
into a single &lt;code&gt;view&lt;/code&gt; component !&lt;/p&gt;
&lt;p id="substance-config-displays-fixed"&gt;Here is how it should look :&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="nt"&gt;displays&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;sRGB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;sRGB&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;ACES&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;ACES sRGB&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;Display P3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display P3&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;Rec709 &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Rec709&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;Rec2020 &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Rec2020&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;False Color&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Raw&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here is the result of the above in Substance Painter :&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/config-substance-fixed-sp.png"&gt;&lt;img alt="Screenshot of the displays part of the Substance Ocio config." src="https://mrlixm.github.io/static/images/blog/0008/config-substance-fixed-sp.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Using OCIO v2 there are other ways to improve how the config is built.
Heads up to &lt;a href="#improving-the-substance-ocio-config"&gt;Improving the Substance OCIO config&lt;/a&gt; to see how.&lt;/p&gt;
&lt;p&gt;But even with this fix, it‚Äôs not very friendly to have a long list of merged
(display + view) while you would only need one Display most of the time. &lt;strong&gt;The
best solution here would be to have 2 dropdowns&lt;/strong&gt; :
One to choose the Display, and one to choose the corresponding available View.
We should even get a third one for looks as we are going to see in the next
section :&lt;/p&gt;
&lt;/section&gt;
&lt;section id="partial-look-support"&gt;
&lt;h4&gt;&lt;a href="#id42"&gt;Partial Look support&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In above explanations where I mention OCIO Display is build with
3 components, we now see that I didn‚Äôt mention the last one yet: Looks.&lt;/p&gt;
&lt;p&gt;Looks is a color-tansformation performed in any colorspace aimed at
modifying the data in a creative way. This would allow for example the
artist to have a first look at how its renders could looks like after the
&lt;abbr title="Digital Intermediate = grading process"&gt;di&lt;/abbr&gt; pass.&lt;/p&gt;
&lt;p&gt;Usually, Looks are defined similar to colorspaces, as a list, but you can also
make a Look available in a display‚Äôs view:&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="nt"&gt;displays&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;sRGB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;sRGB-Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Display Grade A&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;sRGB-Display&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; looks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;gradeA&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;looks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;Look&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;gradeA&lt;/span&gt;
  &lt;span class="nt"&gt;process_space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rclg16&lt;/span&gt;
  &lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;FileTransform&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;look_A.cc&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; interpolation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;linear&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In the best case, we should have a dropdown menu that would allow us to combine
the current &lt;code&gt;view-transform&lt;/code&gt; with any Look defined. A good example of this
is Blender :&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/blender-cm.png"&gt;&lt;img alt="Screenshot of Blender color-management menu." src="https://mrlixm.github.io/static/images/blog/0008/blender-cm.png" /&gt;&lt;/a&gt;
&lt;figcaption&gt;Notice how it respects the 3 components of an OCIO display.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Unfortunately, sp didn‚Äôt implement this feature yet. So we can only rely
on merging the look in a display view for now.&lt;/p&gt;
&lt;p&gt;A good way to test this is using the &lt;a href="https://github.com/sobotka/filmic-blender"&gt;Filmic&lt;/a&gt; OCIO config by Troy Sobotka.
The filmic encoding is correctly available in a &lt;code&gt;View&lt;/code&gt; but require an
extra step to be correctly displayed. By default it is a flat log
representation, and require choosing a Look with the desired contrast amount.&lt;/p&gt;
&lt;p&gt;To have it working in sp, it is required to merge the Look in a new &lt;code&gt;View&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="nt"&gt;displays&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;sRGB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;sRGB OETF&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;sRGB OETF&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!&amp;lt;View&amp;gt;&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Filmic Very High Contrast&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; colorspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Filmic Log Encoding&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; look&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;+Very High Contrast&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;...&lt;/span&gt;&lt;/pre&gt;
&lt;p id="sp-odt-name-cropped"&gt;Which in sp, if we kept all the contrast amount, give us a very long list of
cropped name üò¨ But at least it‚Äôs working.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0008/sp-odt-filmic.png"&gt;&lt;img alt="Screenshot of sp view-transform with filmic view." src="https://mrlixm.github.io/static/images/blog/0008/sp-odt-filmic.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="improving-the-substance-ocio-config"&gt;
&lt;h3&gt;&lt;a href="#id43"&gt;Improving the Substance OCIO config&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Substance OCIO config is an OCIO v1 configuration. I don‚Äôt know
what is the reason they decided to not use the v2 for their config because
it could really helped having a cleaner and better config (even if the artist
wouldn‚Äôt see that much of a difference).&lt;/p&gt;
&lt;p&gt;By curiosity I tried to put my hand on OCIO v2 and create a config that could
be a substitution of the Substance config. Documentation was pretty straight
forward and I manage to build a nice config using python. You can find the
result here :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://github.com/MrLixm/OCIO.Liam"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://repository-images.githubusercontent.com/433153908/03fa53a5-a654-4728-a5ed-60ab1ac6babd" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;OCIO.Liam&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://github.com/MrLixm/OCIO.Liam"&gt;https://github.com/MrLixm/OCIO.Liam&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;Personal OCIO resources, including configs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I called it &lt;code&gt;Versatile&lt;/code&gt;. It only misses the &lt;code&gt;false color&lt;/code&gt; view from the
Substance config. Have a look at the
&lt;a href="https://github.com/MrLixm/OCIO.Liam/blob/main/versatile/config/config.ocio"&gt;config.ocio&lt;/a&gt;
file to see the new features.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="issues-recap"&gt;
&lt;h3&gt;&lt;a href="#id44"&gt;Issues Recap&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;
This list aim at helping the potential Substance dev team members reading
this, addressing the issues.&lt;br /&gt;
&lt;em&gt;Keep in mind that this is my personal opinion, i‚Äôm not a color-scientist
nor a profesional developer.&lt;/em&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
Substance config uses the wrong Rec.709 display encoding.&lt;br /&gt;
(see &lt;a href="#the-rec709-transfer-function-issue"&gt;the rec709 transfer-function issue&lt;/a&gt;)&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Substance config miss simple P3 colorspaces while it offers a Rec2020 one
(who would use it ??)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Substance config &lt;code&gt;displays&lt;/code&gt; key is not properly built.&lt;br /&gt;
(see &lt;a href="#substance-config-displays-fixed"&gt;substance-config-displays-fixed&lt;/a&gt; )&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Substance config could overall, benefits from using OCIO v2 features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;span class="m-text m-s l-c-color-6"&gt;OCIO roles are not supported, as such default configuration for
projects is wrong and can confuse artists.&lt;/span&gt;&lt;br /&gt;
(implemented on 7.4.2 !)(see &lt;a href="#substance-parameters-for-ocio-configs"&gt;Substance parameters for OCIO configs&lt;/a&gt;)&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
The view-transform dropdown is too small in width. When selecting long
&lt;code&gt;display&lt;/code&gt; names, they got cropped.&lt;br /&gt;
(see &lt;a href="#sp-odt-name-cropped"&gt;sp-odt-name-cropped&lt;/a&gt;)&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
The view-transform dropdown could be split into 2 dropdowns. One for
Displays and one for Views.&lt;br /&gt;
(see &lt;a href="#substance-config-displays-fixed"&gt;substance-config-displays-fixed&lt;/a&gt; )&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colorspace on resources (images, ‚Ä¶) should be performable from the shelf
and not from a layer‚Äôs slot. A resource doesn‚Äôt have its original
colorspace changing depending on where it‚Äôs used !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;span class="m-text m-s l-c-color-6"&gt;There is no direct option to change the environment image colorspace.
Having the above suggestion implemented would solve this one too.&lt;/span&gt;&lt;br /&gt;
(implemented on 7.4.2 !)(see &lt;a href="#environment"&gt;Environment&lt;/a&gt; )&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;span class="m-text m-s l-c-color-6"&gt;Color-picker : modifying the top colorspace should affect the
editable values. Where the top colorspace represents the colorspace used
to enter values so they can be converted to the working colorspace
behind the scene.&lt;/span&gt;&lt;br /&gt;
(implemented on 7.4.2 !)&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;span class="m-text m-s l-c-color-6"&gt;With the above, add a way to see what values are being used in
the workspace.&lt;/span&gt;&lt;br /&gt;
(implemented on 7.4.2 !)&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Color-picker is broken. It react differently depending of the OCIO
config version use.&lt;br /&gt;
(see &lt;a href="#picker"&gt;picker&lt;/a&gt; section for details).&lt;br /&gt;
Update: it is less broken in 7.4.2 but there is still no some issues.&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No options to set a specific colorspace for textures at export time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When use the following OCIO v2 colorspace name token, an error is logged:&lt;/p&gt;
&lt;pre class="m-code"&gt;[ColorManagement] Error while creating OpenColorIO colorspace transform: Color space &amp;#39;&amp;lt;USE_DISPLAY_NAME&amp;gt;&amp;#39; could not be found&lt;/pre&gt;
&lt;p&gt;But displays still manage to work without issues.&lt;/p&gt;
&lt;p&gt;EDIT: This actually affect the color-picker who doesn‚Äôt seems to supports
shared-views.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;&lt;a href="#id45"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Damn that was a long one. Congrats if you stick to the end, I hope you
now have an idea of how you could use OCIO in SubstancePainter. If not,
don‚Äôt hesitate to &lt;a href="/pages/contact"&gt;contact&lt;/a&gt; me to suggest how this
article could be improved. (you can also join the discord, click on the purple
button at the bottom of this page)&lt;/p&gt;
&lt;p&gt;If you like this post and wish to support me you could buy some of my
scripts on &lt;a href="https://app.gumroad.com/pyco"&gt;my Gumroad&lt;/a&gt; or check my ko-fi at
the bottom of this page.&lt;/p&gt;
&lt;p&gt;I see you in the next one that would probably be on the same topic but on
Mari. üëã&lt;/p&gt;
&lt;/section&gt;
&lt;section id="resources"&gt;
&lt;h2&gt;&lt;a href="#id46"&gt;Resources&lt;/a&gt;&lt;/h2&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://hg2dc.com/"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://hg2dc.files.wordpress.com/2019/12/hg2dc-header-1.png" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;The Hitchhiker‚Äôs Guide to Digital Colour&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://hg2dc.com/"&gt;https://hg2dc.com/&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;The step by step guidebook for digital pixel pushers trying to get a firm
grasp on colour to get sh*t done‚Ä¶&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://chrisbrejon.com/cg-cinematography/chapter-1-color-management"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://i0.wp.com/news.umbc.edu/wp-content/uploads/2016/02/mantis-shrimp.jpg?resize=1920%2C768&amp;amp;ssl=1" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Chris Brejon‚Äôs Book&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://chrisbrejon.com/cg-cinematography/chapter-1-color-management"&gt;https://chrisbrejon.com/cg-cinematography/chapter-1-color-management&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;CG Cinematography Color Management is about this beautiful yet annoying
and essential topic of gamut. Definitely not the easiest way to start.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://community.acescentral.com/"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://community.acescentral.com/uploads/default/original/2X/c/cd5dcf316e1618c7bff0c0e4bd3b01825010b554.png" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;ACES Central&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://community.acescentral.com/"&gt;https://community.acescentral.com/&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;ACES Community Forum&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://cinematiccolor.org/"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://pbs.twimg.com/profile_banners/75077867/1516422798/1080x360" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Cinematic Color&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://cinematiccolor.org/"&gt;https://cinematiccolor.org/&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;This paper from 2012 presents an introduction to the color pipelines
behind modern feature-film visual-effects and animation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://discord.gg/jk6u3eB"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;svg width="60" role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&gt;
    &lt;title&gt;Discord&lt;/title&gt;
    &lt;path fill="currentColor" d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"/&gt;
&lt;/svg&gt;&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;Digital Imaging | Discord Server&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://discord.gg/jk6u3eB"&gt;https://discord.gg/jk6u3eB&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;A Discord server centered around digital imaging - from CGI to digital
cinematography and photography and more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="changelog"&gt;
&lt;h2&gt;&lt;a href="#id47"&gt;Changelog&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;17-12-2021&lt;/code&gt;: fixed &lt;a href="#the-color-picker"&gt;The color-picker&lt;/a&gt; section. &lt;a href="https://community.acescentral.com/t/aces-and-substance-painter/2299/42"&gt;Discussion available here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;09-03-2022&lt;/code&gt;: Updated article following 7.4.2 update.&lt;ul&gt;
&lt;li&gt;&lt;a href="#substance-parameters-for-ocio-configs"&gt;Substance parameters for OCIO configs&lt;/a&gt; : updated&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-color-picker"&gt;The color-picker&lt;/a&gt; : whole section re-wrote&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment"&gt;Environment&lt;/a&gt; : updated&lt;/li&gt;
&lt;li&gt;&lt;a href="#aces-colorpicker"&gt;ACES - Colorpicker&lt;/a&gt; : updated&lt;/li&gt;
&lt;li&gt;&lt;a href="#issues-recap"&gt;Issues Recap&lt;/a&gt; : updated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</content><category term="tutorial"></category><category term="substance-painter"></category><category term="color-science"></category><category term="OCIO"></category><category term="ACES"></category></entry><entry><title>OpenDRT : a nice (experimental) alternative to ACES</title><link href="https://mrlixm.github.io/blog/opendrt/" rel="alternate"></link><published>2021-11-24T19:02:00+01:00</published><updated>2021-11-24T19:02:00+01:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2021-11-24:/blog/opendrt/</id><summary type="html">&lt;p&gt;An open-source alternative to convert scene-linear data to SDR or
HDR display image.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;With the Academy Color Encoding System (ACES) becoming omnipresent more and
more, it would be worth keeping in mind that it‚Äôs not the only solution to have
a good color-managed pipeline (let‚Äôs keep that for a future article) .
I‚Äôm not going to try to go too far and stick to the title even tho there is
a lot to discuss on the topic.&lt;/p&gt;
&lt;p&gt;If most people get into ACES, it‚Äôs mainly for its ‚Äúfilmic‚Äù looks (provided by
the RRT), rather than having a full color-managed workflow.
And that is understandable, as individual artists, you most of the time, only
care about having the prettiest image possible at the end.&lt;/p&gt;
&lt;p&gt;So what if you got a well-formed and pleasing image at the end without having
to go through the complexity of ACES ?&lt;/p&gt;
&lt;nav id="contents"&gt;
&lt;h3&gt;Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#who-s-this-for" id="id1"&gt;Who‚Äôs this for ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#node-knobs" id="id2"&gt;Node knobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nuke" id="id3"&gt;Nuke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#node-setup" id="id4"&gt;Node Setup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#revert-display" id="id5"&gt;Revert Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nuke-display-encoding-disable" id="id6"&gt;Nuke Display-encoding disable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#opendrt-no-display-encoding" id="id7"&gt;OpenDRT no Display-encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#opendrt-with-viewer-input-process-recommended" id="id8"&gt;OpenDRT with Viewer Input Process (recommended)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion" id="id9"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;/aside&gt;
&lt;section id="who-s-this-for"&gt;
&lt;h2&gt;&lt;a href="#id1"&gt;Who‚Äôs this for ?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My post mainly targets the VFX-CGI audience but OpenDRT work on any
open-domain/scene-referred data, including photography and cinematography.
(as long as the data is not in a closed-display-domain).&lt;/p&gt;
&lt;p&gt;This means that for CGI, you are familiar with a ‚Äúscene-linear workflow‚Äù :&lt;/p&gt;
&lt;pre&gt;Render -[EXR]&amp;gt; compositing/postprod(linear) -&amp;gt; display-refered final output [jpg,...]&lt;/pre&gt;
&lt;p&gt;
Then the OpenDRT implementation is only available as a Nuke Gizmo and
through Davinci Resolve DCTL feature (on paid licenses) which imply you
are using one of these dccs.&lt;br /&gt;
No OCIO support, this means you will have with your traditional workflow in
your rendering DCC and only be able to preview the final image in your
post-prod one which is not an ideal one.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;With all of that , this mean &lt;strong&gt;my post is aimed at individual artist doing
personal projects that would like a quick solution for proper SDR-HDR export.&lt;/strong&gt;
(OpenDRT is probably aimed at additionals goal)&lt;/p&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://github.com/jedypod/open-display-transform"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="64" height="64" viewBox="0 0 24 24"&gt;
    &lt;path fill="currentColor" d="M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z"/&gt;
&lt;/svg&gt;&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;OpenDRT repository.&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://github.com/jedypod/open-display-transform"&gt;https://github.com/jedypod/open-display-transform&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;Download on github.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, please have a look at the above repository, read Jed‚Äôs explanations and
the tool‚Äôs documentation.&lt;/p&gt;
&lt;p&gt;Before diving into the setup I think it‚Äôs important to remind the target
of OpenDRT:&lt;/p&gt;
&lt;blockquote&gt;
The tool has for goal the faithful conversion of open-domain /
scene-referred data to a closed-domain : the display. This mean
&lt;strong&gt;no creative transformations are applied&lt;/strong&gt;. As such the output‚Äôs result
can look very neutral and should be graded.&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="node-knobs"&gt;
&lt;h2&gt;&lt;a href="#id2"&gt;Node knobs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the tool is constantly changing, Jed‚Äôs documentation is not up to date,
and thus this post will also probably be.&lt;/p&gt;
&lt;aside class="m-note m-default"&gt;
All the examples are using Opendrt version &lt;code&gt;0.0.90b2&lt;/code&gt;&lt;/aside&gt;
&lt;/aside&gt;
&lt;div class="m-row"&gt;
&lt;div class="m-container-inflate m-col-l-5 m-left-l"&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0004/nuke.opendrt.png"&gt;&lt;img alt="OpenDRT global overview" src="https://mrlixm.github.io/static/images/blog/0004/nuke.opendrt.png" style="width: 280px" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="m-col-l-7"&gt;
&lt;p&gt;
First thing, tell the tool in which &lt;code&gt;gamut&lt;/code&gt; your input is.&lt;br /&gt;
I assume the input should be Linearly encoded.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;You then have a bunch of presets that will tweak the knobs for you
based on your target display encoding.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lw&lt;/code&gt; : this is the nits level of the target display and shouldn‚Äôt be
used as a creative adjustment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100nits is the value defined as per the
&lt;a href="https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.2035-0-201307-I!!PDF-E.pdf"&gt;ITU-R  BT.2035&lt;/a&gt;
specifications and should represent the peak-white value of a
display in a dim surround.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;surround&lt;/code&gt; : the luminance level of the viewing environment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dark&lt;/code&gt; : theatrical viewing environment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dim&lt;/code&gt;: ‚Äúhome theater‚Äù (low light condition).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;average&lt;/code&gt;: desktop/office average surround.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dechroma&lt;/code&gt; : this one is more ‚Äúsubjective‚Äù, allowing to control
the amount of chrominance compression that should be applied on values
reaching display maximum (R,G,B=1.0). If HDR imagery needs to be
produced, this can be lowered (as the target domain (hdr) has more
volume to express chroma)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;saturation&lt;/code&gt; : Expand chroma on the bottom values after the compression by
the dechroma.
See more &lt;a href="https://community.acescentral.com/t/proposal-for-resolving-the-conflict-beween-swappable-core-rendering-vs-doing-everything-in-lmt/4012/9"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;whitepoint&lt;/code&gt; : (from doc) Sets the creative whitepoint. This allows
you to creatively set the whitepoint of your display rendering if
you want it to be different than the technical whitepoint of your
display device. For example, if you set this to D55, neutral colors will
be rendered as a warmer hue compared to the default D65.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;display encoding&lt;/code&gt; : &lt;em&gt;This part will be re-addressed under.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
The &lt;code&gt;eotf&lt;/code&gt; should correspond to the transfer-function used by the
targeted display.&lt;br /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href="https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.1886-0-201103-I!!PDF-E.pdf"&gt;BT.1886&lt;/a&gt;
, the default value, correspond to a 2.4 power function,
which is the standard for Rec.709.&lt;br /&gt;
For the average of user display you should use &lt;code&gt;sRGB Display&lt;/code&gt;.&lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
The &lt;code&gt;gamut&lt;/code&gt; correspond once again to the gamut that the targeted display
is calibrated to. (reminder that sRGB use the same gamut as Rec.709)&lt;br /&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="m-transition"&gt;.&lt;/p&gt;
&lt;p&gt;To adjust these settings properly &lt;strong&gt;you have to know the targeted display&lt;/strong&gt;
&lt;strong&gt;+ user&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;The issue is that with today range of displays, this is a rather difficult one
to average (until you have the full-control on the display the image is
going to be viewed on )&lt;/p&gt;
&lt;p&gt;
In the case of web publishing, for example, the average user will probably
have a SDR display, sRGB encoded, with an average white peak of 100 nits and
used in an office environment that can be brighter than a &lt;code&gt;dim&lt;/code&gt; surround.
If we add smartphones to the equation, thing will get messy ‚Ä¶&lt;br /&gt;
I‚Äôm still digging on the subject trying to gather more info and as such will
close this topic.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;So for now, using the presets is, I think a good practice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nuke"&gt;
&lt;h2&gt;&lt;a href="#id3"&gt;Nuke&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(For now i‚Äôm only going to show how you can use it in Nuke as I don‚Äôt have
a Resolve License)&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jedypod/open-display-transform/main/display-transforms/nuke/OpenDRT.nk"&gt;Download the .nk file&lt;/a&gt;
(Right click on the page &amp;gt; save as &amp;gt; save it somewhere)&lt;/li&gt;
&lt;li&gt;Import the .nk file: File &amp;gt; Insert Comp Nodes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or alternatively :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jedypod/open-display-transform/main/display-transforms/nuke/OpenDRT.nk"&gt;Open the .nk&lt;/a&gt;
file and copy all of his content &lt;code&gt;(ctrl+a, ctrl+c)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Paste in Nuke &lt;code&gt;(ctrl+v)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alright, you now have the OpenDRT node.&lt;/p&gt;
&lt;section id="node-setup"&gt;
&lt;h3&gt;&lt;a href="#id4"&gt;Node Setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Things will now get a bit complicated at first. The issue is that has the
OpenDRT handle the scene -&amp;gt; display conversion, this will collide with Nuke
that try to do the same in the view-transform.&lt;/p&gt;
&lt;p&gt;I found 4 different solutions that achieve the same result. I think the last
one is recommend to use but it‚Äôs good to have other example that might help to
understand how everything works.&lt;/p&gt;
&lt;aside class="m-note m-warning"&gt;
I didn‚Äôt test any of these solutions with HDR display-encoding so
further investigation needs to be done.&lt;/aside&gt;
&lt;/aside&gt;
&lt;aside class="m-note m-info"&gt;
I will keep the defaut &lt;code&gt;BT.1886&lt;/code&gt; value for the eotf, but to match the
nuke‚Äôs default config I should have use &lt;code&gt;sRGB Display&lt;/code&gt;.&lt;/aside&gt;
&lt;/aside&gt;
&lt;section id="revert-display"&gt;
&lt;h4&gt;&lt;a href="#id5"&gt;Revert Display&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We let the DRT handle everything (with display-encoding), then we apply the
invert transform that applied by Nuke:&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0004/nuke.revert.png"&gt;&lt;img alt="Revert Display method in Nuke" src="https://mrlixm.github.io/static/images/blog/0004/nuke.revert.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Writing the data is as before. You just have to be sure that the &lt;code&gt;Colorspace&lt;/code&gt;
node has the same &lt;code&gt;in&lt;/code&gt; parameters as the &lt;code&gt;colorspace&lt;/code&gt; one on the write node.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nuke-display-encoding-disable"&gt;
&lt;h4&gt;&lt;a href="#id6"&gt;Nuke Display-encoding disable&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We disable Nuke‚Äôs handling of the display-encoding. The DRT is the last step.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0004/nuke.nuke_no-de.png"&gt;&lt;img alt="Method with Nuke display-encoding disable" src="https://mrlixm.github.io/static/images/blog/0004/nuke.nuke_no-de.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;This means the Nuke view-transform is always off which can be incovenient
when you need to preview a node upstream.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="opendrt-no-display-encoding"&gt;
&lt;h4&gt;&lt;a href="#id7"&gt;OpenDRT no Display-encoding&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;One good solution: the OpenDRT doesn‚Äôt handle the display
encoding but output closed-domain data ready for the display.
Nuke apply the display-encoding as usually, writing data is the regular
workflow.&lt;/p&gt;
&lt;p&gt;Be careful as OpenDRT still handle the gamut conversion from the input to the
output. Write node colorspace need to be choosen with this is mind.&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0004/nuke.drt_no-de.png"&gt;&lt;img alt="Method with OpenDRT display-encoding disable." src="https://mrlixm.github.io/static/images/blog/0004/nuke.drt_no-de.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="opendrt-with-viewer-input-process-recommended"&gt;
&lt;h4&gt;&lt;a href="#id8"&gt;OpenDRT with Viewer Input Process (recommended)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is probably the best solution :&lt;/p&gt;
&lt;p&gt;
OpenDRT handle everything, we disable Nuke view-transform but we will be
using its &lt;a href="https://learn.foundry.com/nuke/content/getting_started/using_interface/guides_masks_modes.html#InputProcessandViewerProcessControls"&gt;input process feature&lt;/a&gt;.&lt;br /&gt;
This will allow to always have the OpenDRT active no matter what node we are
previewing &lt;span class="m-text m-warning"&gt;(this can be inconvenient when viewing scalar data like
alpha, think to disable the input-process in that case.)&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;div class="m-image"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0004/nuke.ip.png"&gt;&lt;img alt="Method with OpenDRT + Nuke Input Process" src="https://mrlixm.github.io/static/images/blog/0004/nuke.ip.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;We don‚Äôt actually need the node used as input-process to be connected to
anything but here &lt;strong&gt;I‚Äôm making sure it‚Äôs connected before the write node&lt;/strong&gt;, so
OpenDRT get baked in at export.&lt;/p&gt;
&lt;p&gt;As OpenDRT handled the display encoding we can turn it off on the write node
by checking &lt;code&gt;raw data&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;&lt;a href="#id9"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you tried to compare the result to an ACES processed image you would have
probably notice that the image-formation produce much more ‚Äúexcepted‚Äù result,
among others, in strong colored highlights, which make OpenDRT a solid
candidate at better image-formation and a peak of what could be used in the
future.&lt;/p&gt;
&lt;p&gt;Even if it‚Äôs current form kind of break the purpose of a consistant
color-managed system across DCCs, it is a nice solution for individuals and
looks very promising.
(Jed told me it could be actually pretty simple to create an OCIO config so
we can only hope he finds time to !).&lt;/p&gt;
&lt;p&gt;Make sure to star &lt;a href="https://github.com/jedypod/open-display-transform"&gt;Jed‚Äôs repository&lt;/a&gt;
on Github !&lt;/p&gt;
&lt;/section&gt;
</content><category term="tutorial"></category><category term="nuke"></category><category term="resolve"></category><category term="ACES"></category><category term="tonemapping"></category><category term="color-science"></category></entry><entry><title>CGI-related white-papers database</title><link href="https://mrlixm.github.io/blog/cgi_whitepaper_database/" rel="alternate"></link><published>2021-11-08T22:34:00+01:00</published><updated>2021-11-08T22:34:00+01:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2021-11-08:/blog/cgi_whitepaper_database/</id><summary type="html">&lt;p&gt;&lt;em&gt;‚Äù 70+ white-papers conveniently ordered for you ‚Äú&lt;/em&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As an artist, I found white-papers absolutely fascinating and so useful
to understand how the software we are using are built.
Even if platform like the &lt;a href="https://dl.acm.org"&gt;ACM digital library&lt;/a&gt; regroup
most of them, it can be hard to find only the pertinent one when you are
interested only about CGI in a VFX context.&lt;/p&gt;
&lt;p class="m-transition"&gt;.&lt;/p&gt;
&lt;p&gt;So in my free-time I regrouped the one I find most pertinent, for the above
context, in a Notion database :&lt;/p&gt;
&lt;div class="l-url-box"&gt;
&lt;a class="l-url-a" href="https://liamcollod.notion.site/CGI-White-Papers-0ed5f781e8164b569a419802972afc34"&gt;&lt;/a&gt;
&lt;div class="l-url-box-image"&gt;
&lt;img src="https://images.pexels.com/photos/240163/pexels-photo-240163.jpeg" /&gt;
&lt;/div&gt;
&lt;div class="l-url-box-details"&gt;
&lt;p class="l-url-title"&gt;CGI-White-Papers&lt;/p&gt;
&lt;div class="l-url-subtitle"&gt;
&lt;a class="m-link-wrap" href="https://liamcollod.notion.site/CGI-White-Papers-0ed5f781e8164b569a419802972afc34"&gt;https://liamcollod.notion.site/CGI-White-Papers-0ed5f781e8164b569a419802972afc34&lt;/a&gt;
&lt;/div&gt;
&lt;p class="l-url-description"&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class="m-transition"&gt;.&lt;/p&gt;
&lt;p&gt;
I tried to keep most of them as ‚Äúfree‚Äù but some of them might be locked
behind a paywall‚Ä¶&lt;br /&gt;
As I‚Äôm someone that definitively think core knowledge should be lock behind
a paywall I would absolutely  not recommend to use &lt;a href="https://sci-hub.mksa.top/"&gt;Sci-hub&lt;/a&gt; to find a free illegal version of these paid papers. (here is
the full url to be sure you doesn‚Äôt click on it &lt;a class="m-link-wrap" href="https://sci-hub.mksa.top/"&gt;https://sci-hub.mksa.top/&lt;/a&gt; ).&lt;br /&gt;
&lt;/p&gt;
</content><category term="resource"></category><category term="science"></category><category term="math"></category><category term="shading"></category><category term="lighting"></category><category term="rendering"></category></entry><entry><title>A Discord server for Coding in VFX/CGI</title><link href="https://mrlixm.github.io/blog/vfx_coding_discord/" rel="alternate"></link><published>2021-10-23T22:59:00+02:00</published><updated>2021-10-23T22:59:00+02:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2021-10-23:/blog/vfx_coding_discord/</id><summary type="html">&lt;p&gt;&lt;em&gt;‚Äù A bunch of resources you don‚Äôt want to miss ‚Äú&lt;/em&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
Not much to explain,&lt;br /&gt;
I‚Äôm managing this server where I post anything useful that I find,
related to coding in the VFX industry.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;Examples of resources:&lt;/p&gt;
&lt;pre&gt;python, c++, osl, lua, pipeline, memes, github

Qt - Pyside, Maya, Houdini, Nuke, Katana, Mari, Substance&lt;/pre&gt;
&lt;p class="m-transition"&gt;~&lt;/p&gt;
&lt;p&gt;Click on the &lt;code&gt;Connect&lt;/code&gt; button bellow to join or here &lt;a href="https://discord.gg/KepWvn8"&gt;https://discord.gg/KepWvn8&lt;/a&gt; :&lt;/p&gt;
&lt;div class="m-col-none"&gt;
&lt;iframe src="https://discord.com/widget?id=718106101773500527&amp;theme=dark" width="100%" height="160" allowtransparency="true" frameborder="0" sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"&gt;&lt;/iframe&gt;&lt;/div&gt;
</content><category term="resource"></category><category term="python"></category><category term="osl"></category><category term="lua"></category><category term="katana"></category><category term="mari"></category><category term="maya"></category><category term="qt"></category><category term="discord"></category><category term="resources"></category><category term="coding"></category></entry><entry><title>When cgi-production goes wrong.</title><link href="https://mrlixm.github.io/blog/prod_goes_wrong/" rel="alternate"></link><published>2021-10-16T20:00:00+02:00</published><updated>2021-10-22T13:02:00+02:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2021-10-16:/blog/prod_goes_wrong/</id><summary type="html">&lt;p&gt;Producing content using a computer can lead sometimes to unexcepted results,
wether it‚Äôs the user fault or the software one. And this is especially true when
working on 3d animated movies ‚Ä¶&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Enjoy this compilation of no-context pictures from the production of
short-movies at &lt;a href="https://liamcollod.notion.site/CPasDec-Association-4105082a881e499b9e385d84f6da933d"&gt;CpasDec&lt;/a&gt;.&lt;/p&gt;
&lt;div class="m-imagegrid m-container-inflate"&gt;
&lt;div&gt;
&lt;figure style="width: 61.803%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/blendshapes.png.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/blendshapes.png.png" /&gt;&lt;figcaption&gt;blendshapes.png&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 38.197%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Peak_Grooming.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Peak_Grooming.png" /&gt;&lt;figcaption&gt;Peak Grooming&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 29.797%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Crying_in_groom.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Crying_in_groom.png" /&gt;&lt;figcaption&gt;Crying in groom&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 12.825%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/BONJOUR.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/BONJOUR.PNG" /&gt;&lt;figcaption&gt;BONJOUR&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 57.378%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Aways_a_funny_one_to_Lookdev.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Aways_a_funny_one_to_Lookdev.png" /&gt;&lt;figcaption&gt;Aways a funny one to Lookdev&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 17.691%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/He_got_too_much_ketamine.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/He_got_too_much_ketamine.png" /&gt;&lt;figcaption&gt;He saw things ‚Ä¶&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 46.044%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/A_famous_French_politician_....PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/A_famous_French_politician_....PNG" /&gt;&lt;figcaption&gt;A famous French politician ‚Ä¶&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 36.265%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Somebody_toucha_my_spaghet.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Somebody_toucha_my_spaghet.png" /&gt;&lt;figcaption&gt;Somebody toucha my spaghet&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 62.282%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Merfi.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Merfi.PNG" /&gt;&lt;figcaption&gt;Merfi&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 37.718%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/CHONK_UVs.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/CHONK_UVs.png" /&gt;&lt;figcaption&gt;CHONK UVs&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 81.065%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Oh_no_I_added_to_much_-101.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Oh_no_I_added_to_much_-101.png" /&gt;&lt;figcaption&gt;Oh no I added to much aÃµÃíÃöÃïÕâÃ¢Ã°ÃµÃæÕëÕÜÕúÕâÃübÃ¥ÃøÃîÕíÕçÕúÃºÃµÃìÕåÕöÃôÃ¢bÃ∏ÕëÕ†ÕëÃªÃ°ÃòÃ¥ÕùÕÄÕåÕôÕôÃ∫eÃ¥ÕåÕ†ÃìÃ¶ÕâÃ∫Ã∏ÃíÃΩÃ°Ã´Ã´rÃ∏Õ†ÃöÕÑÃ∫Ã°ÃüÃµÕ†ÃæÃæÃ´Ã¶aÃ¥ÕäÕùÃíÕôÃòÃ¶Ã∏ÕùÃîÕùÃ∫ÃôÃ∫tÃµÃæÕíÕîÕáÃ´ÃµÕ†ÃïÃîÕúÕúÕöiÃµÃïÃêÃêÕîÃûÃ™Ã∏ÕùÃöÃ†ÃùÃ™oÃ∏ÕõÕãÕ†ÕöÕöÕéÃ¥ÃöÕÑÕùÕïÃªnÃ∏ÕãÕùÃΩÃ¶ÕéÃ™Ã¥ÕêÃîÕåÃòÃ´Ã∫&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 18.935%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/ahhhhhhhhh.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/ahhhhhhhhh.png" /&gt;&lt;figcaption&gt;ahhhhhhhhh&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 34.358%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Curvature_being_affected_by_gravity.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Curvature_being_affected_by_gravity.png" /&gt;&lt;figcaption&gt;Curvature being affected by gravity&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 65.642%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/She_probably_dropped_something_important.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/She_probably_dropped_something_important.PNG" /&gt;&lt;figcaption&gt;She probably dropped something important&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 72.560%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Awaken_2.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Awaken_2.png" /&gt;&lt;figcaption&gt;Awaken 2&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 27.440%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Squidward_IS_pissed.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Squidward_IS_pissed.png" /&gt;&lt;figcaption&gt;Squidward IS pissed&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 52.356%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Plouf.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Plouf.png" /&gt;&lt;figcaption&gt;Plouf&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 26.821%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Disco_flask.gif"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Disco_flask.gif" /&gt;&lt;figcaption&gt;Disco flask&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 20.823%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/O~O.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/O~O.png" /&gt;&lt;figcaption&gt;O~O&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 39.843%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Leaked_new_Gucci_dress_collection.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Leaked_new_Gucci_dress_collection.png" /&gt;&lt;figcaption&gt;Leaked new Gucci dress collection&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 60.157%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/martinunknown.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/martinunknown.png" /&gt;&lt;figcaption&gt;when you‚Äôre on your 10th coffee&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 49.127%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Mrs_I_think_your_forgot_something.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Mrs_I_think_your_forgot_something.PNG" /&gt;&lt;figcaption&gt;Mrs I think your forgot something&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 50.873%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Team's_Lighter_will_remember_this_cathedral_....png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Team's_Lighter_will_remember_this_cathedral_....png" /&gt;&lt;figcaption&gt;Team‚Äôs Lighters will remember this cathedral ‚Ä¶&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 33.924%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Ahh_blendshapes.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Ahh_blendshapes.png" /&gt;&lt;figcaption&gt;Ahh blendshapes&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 66.076%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Bacterias_when_you_pickup_the_dropped_food_in_less_than_5s.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Bacterias_when_you_pickup_the_dropped_food_in_less_than_5s.PNG" /&gt;&lt;figcaption&gt;Bacterias when you pickup the dropped food in less than 5s&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 24.954%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Why_all_men_can't_looks_like_this_-1-1-1.jpg"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Why_all_men_can't_looks_like_this_-1-1-1.jpg" /&gt;&lt;figcaption&gt;Why all men can‚Äôt looks like this ???&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 26.664%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/When_the_deadline_was_yesterday.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/When_the_deadline_was_yesterday.png" /&gt;&lt;figcaption&gt;When the deadline was yesterday&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 48.382%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Bababoei.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Bababoei.png" /&gt;&lt;figcaption&gt;Bababoei&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 37.024%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/ah.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/ah.PNG" /&gt;&lt;figcaption&gt;ah&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 62.976%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Ohoh_my_animation_caught_something.jpg"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Ohoh_my_animation_caught_something.jpg" /&gt;&lt;figcaption&gt;Ohoh my animation caught something&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 47.066%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/WindowsXp_vibes.jpg"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/WindowsXp_vibes.jpg" /&gt;&lt;figcaption&gt;WindowsXp vibes&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 52.934%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/-200.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/-200.png" /&gt;&lt;figcaption&gt;0*0&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 38.946%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Blendshape_hell.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Blendshape_hell.png" /&gt;&lt;figcaption&gt;Blendshape hell&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 32.796%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Some_special_kind_of_leaves.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Some_special_kind_of_leaves.png" /&gt;&lt;figcaption&gt;Some special kind of leaves&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 28.258%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Mondays_be_like.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Mondays_be_like.png" /&gt;&lt;figcaption&gt;Mondays be like&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 45.205%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Maya_+_Xgen.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Maya_+_Xgen.png" /&gt;&lt;figcaption&gt;Maya + Xgen&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 54.795%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/He_have_ASCENDED.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/He_have_ASCENDED.png" /&gt;&lt;figcaption&gt;He have ASCENDED&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 42.193%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Angary_House.jpg"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Angary_House.jpg" /&gt;&lt;figcaption&gt;Angary House&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 32.113%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Next_level_of_tired.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Next_level_of_tired.png" /&gt;&lt;figcaption&gt;Next level of tired&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 25.695%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Can_I_get_uuuuh_..._your_soul_-1.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Can_I_get_uuuuh_..._your_soul_-1.png" /&gt;&lt;figcaption&gt;Can I get uuuuh ‚Ä¶ your soul ?&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 56.688%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/romain0564654.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/romain0564654.png" /&gt;&lt;figcaption&gt;production ready&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 43.312%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Bro_I_can't_stand_being_unwrapped_anymore_‚Ä¶_please.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Bro_I_can't_stand_being_unwrapped_anymore_‚Ä¶_please.png" /&gt;&lt;figcaption&gt;Bro I can‚Äôt stand being unwrapped anymore ‚Ä¶ please&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 57.029%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Render_MotionBlur_in_Render_plz.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Render_MotionBlur_in_Render_plz.png" /&gt;&lt;figcaption&gt;Render MotionBlur in Render plz&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 42.971%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Berthe_travel_to_hyperspace.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Berthe_travel_to_hyperspace.png" /&gt;&lt;figcaption&gt;Berthe travel to hyperspace&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 29.610%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Hehe.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Hehe.png" /&gt;&lt;figcaption&gt;Hehe&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 41.081%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/A_very_hairy_child.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/A_very_hairy_child.png" /&gt;&lt;figcaption&gt;A very hairy child&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 29.308%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Grandma_where_are_your_clothes_-1-1-1.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Grandma_where_are_your_clothes_-1-1-1.png" /&gt;&lt;figcaption&gt;Grandma where are your clothes ???&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 72.349%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Checking_your_weekend_renders_be_like.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Checking_your_weekend_renders_be_like.png" /&gt;&lt;figcaption&gt;Checking your weekend renders be like&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 27.651%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Tired_level_max.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Tired_level_max.png" /&gt;&lt;figcaption&gt;Tired level max&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 59.066%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/omw2doUrMom.gif"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/omw2doUrMom.gif" /&gt;&lt;figcaption&gt;omw2doUrMom&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 40.934%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Oh_you_have_games_on_your_phone_-1-1.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Oh_you_have_games_on_your_phone_-1-1.png" /&gt;&lt;figcaption&gt;Oh you have games on your phone ??&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 24.754%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Blendshape_from_hell.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Blendshape_from_hell.png" /&gt;&lt;figcaption&gt;Blendshape from hell&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 29.752%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Robin_got_an_upgrade.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Robin_got_an_upgrade.png" /&gt;&lt;figcaption&gt;Robin got an upgrade&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 45.494%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Very_Fuzzy_groom.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Very_Fuzzy_groom.png" /&gt;&lt;figcaption&gt;Very Fuzzy groom&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 30.266%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/-5duckface-5.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/-5duckface-5.png" /&gt;&lt;figcaption&gt;&lt;em&gt;duckface&lt;/em&gt;&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 36.000%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Your_Magical_Inquisitor.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Your_Magical_Inquisitor.png" /&gt;&lt;figcaption&gt;Your Magical Inquisitor&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 33.735%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Ficello_le_fromage_trop_rigolo.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Ficello_le_fromage_trop_rigolo.png" /&gt;&lt;figcaption&gt;Ficello, le fromage trop rigolo&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 56.611%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Cmpositing.png.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Cmpositing.png.png" /&gt;&lt;figcaption&gt;Cmpositing.png&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 22.205%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Oh_no_my_-100_dropped.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Oh_no_my_-100_dropped.png" /&gt;&lt;figcaption&gt;Oh no my mÃ¥ÃíÕÅÃêÕïÃ™ÃºoÃµÃíÕùÃ†Ã∫ÃüoÃ¥ÕêÃΩÕéÃªÃ∫dÃµÕÜÕ†ÃòÃ™Õì dropped&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 21.184%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Stoned.png.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Stoned.png.png" /&gt;&lt;figcaption&gt;Stoned.png&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 39.663%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/He_can_see_your_sins.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/He_can_see_your_sins.png" /&gt;&lt;figcaption&gt;He can see your sins&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 27.825%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Shrek_6_Leak.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Shrek_6_Leak.png" /&gt;&lt;figcaption&gt;Shrek 6 Leak&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 32.512%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Why_is_my_hair_flying_-1_Wish_I_knew_child_....png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Why_is_my_hair_flying_-1_Wish_I_knew_child_....png" /&gt;&lt;figcaption&gt;Why is my hair flying ? Wish I knew child ‚Ä¶&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 39.898%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/The_berth-bike.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/The_berth-bike.png" /&gt;&lt;figcaption&gt;The berth-bike&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 60.102%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/boom.gif"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/boom.gif" /&gt;&lt;figcaption&gt;boom&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 45.222%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/CharaDesign_at_his_best.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/CharaDesign_at_his_best.png" /&gt;&lt;figcaption&gt;CharaDesign at his best&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 54.778%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Join_church_we_have_cookies.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Join_church_we_have_cookies.png" /&gt;&lt;figcaption&gt;Join church we have cookies&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 28.972%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/UV_mapping_except_it's_in_3D.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/UV_mapping_except_it's_in_3D.png" /&gt;&lt;figcaption&gt;UV mapping except it‚Äôs in 3D&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 44.448%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/How2KillRenderTimes.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/How2KillRenderTimes.png" /&gt;&lt;figcaption&gt;How2KillRenderTimes&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 26.580%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/I_don't_feel_good_MrStark.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/I_don't_feel_good_MrStark.png" /&gt;&lt;figcaption&gt;I don‚Äôt feel good MrStark&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 29.779%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Monke_is_not_fine.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Monke_is_not_fine.png" /&gt;&lt;figcaption&gt;Monke is not fine&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 35.003%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Assassin's_Creed_vibe.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Assassin's_Creed_vibe.png" /&gt;&lt;figcaption&gt;Assassin‚Äôs Creed vibe&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 35.218%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/This_guy_slap_your_girl_WYD_-1-1.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/This_guy_slap_your_girl_WYD_-1-1.png" /&gt;&lt;figcaption&gt;This guy slap your girl WYD ??&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 23.954%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/awaken.png.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/awaken.png.png" /&gt;&lt;figcaption&gt;awaken.png&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 46.112%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Mitosis_be_like.jpg"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Mitosis_be_like.jpg" /&gt;&lt;figcaption&gt;Mitosis be like&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 29.934%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Maya_+_Setdress_=_-33.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Maya_+_Setdress_=_-33.png" /&gt;&lt;figcaption&gt;Maya + Setdress = &amp;lt;3&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 37.789%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Evolve_to_green.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Evolve_to_green.png" /&gt;&lt;figcaption&gt;Evolve to green&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 29.229%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/A_ncie_boy.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/A_ncie_boy.png" /&gt;&lt;figcaption&gt;A ncie boy&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 32.981%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/uggggggh.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/uggggggh.png" /&gt;&lt;figcaption&gt;uggggggh&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 41.256%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Yeeeesh.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Yeeeesh.png" /&gt;&lt;figcaption&gt;Yeeeesh&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 58.744%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/-5_Stare_at_you_-5_OwO.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/-5_Stare_at_you_-5_OwO.png" /&gt;&lt;figcaption&gt;* Stare at you * OwO&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 41.386%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Groom_issue_n¬∞45636.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Groom_issue_n¬∞45636.PNG" /&gt;&lt;figcaption&gt;Groom issue n¬∞45636&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 58.614%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/hahaCFXFUN.gif"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/hahaCFXFUN.gif" /&gt;&lt;figcaption&gt;hahaCFXFUN&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 33.713%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/shrink.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/shrink.png" /&gt;&lt;figcaption&gt;shrink&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 66.287%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/bonk.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/bonk.png" /&gt;&lt;figcaption&gt;bonk&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 100.000%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/bottom_text.jpg"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/bottom_text.jpg" /&gt;&lt;figcaption&gt;bottom text&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 57.296%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/-1-1-1-1.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/-1-1-1-1.png" /&gt;&lt;figcaption&gt;????&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 22.003%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/-5satisfaction-5.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/-5satisfaction-5.png" /&gt;&lt;figcaption&gt;&lt;em&gt;satisfaction&lt;/em&gt;&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 20.701%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/--0116546.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/--0116546.PNG" /&gt;&lt;div&gt;
&lt;/div&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 12.231%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/best_poster.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/best_poster.png" /&gt;&lt;figcaption&gt;best poster&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 52.494%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/deathtrooper.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/deathtrooper.png" /&gt;&lt;figcaption&gt;deathtrooper&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 35.275%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/grOomfuckGroooooommmmh.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/grOomfuckGroooooommmmh.png" /&gt;&lt;figcaption&gt;grOomfuckGroooooommmmh&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 24.935%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/he_found_the_ketamine.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/he_found_the_ketamine.PNG" /&gt;&lt;figcaption&gt;he found the ketamine&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 75.065%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/He_broke_the_matrix.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/He_broke_the_matrix.png" /&gt;&lt;figcaption&gt;He broke the matrix&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 48.258%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/I_am_the_senate.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/I_am_the_senate.png" /&gt;&lt;figcaption&gt;I am the senate&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 51.742%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Is_this_a_jojo_reference-1-1.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Is_this_a_jojo_reference-1-1.png" /&gt;&lt;figcaption&gt;Is this a jojo reference??&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 48.473%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/I_dont_even_know.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/I_dont_even_know.png" /&gt;&lt;figcaption&gt;I dont even know&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 51.527%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/I_let_you_caption_this_one.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/I_let_you_caption_this_one.PNG" /&gt;&lt;figcaption&gt;I let you caption this one&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 33.914%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/mamamia.PNG"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/mamamia.PNG" /&gt;&lt;figcaption&gt;mamamia&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 32.049%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/New_LooneyTunes_just_dropped.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/New_LooneyTunes_just_dropped.png" /&gt;&lt;figcaption&gt;New LooneyTunes just dropped&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 34.037%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Smooth.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Smooth.png" /&gt;&lt;figcaption&gt;Smooth&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 76.967%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/The_crossover.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/The_crossover.png" /&gt;&lt;figcaption&gt;The crossover&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 23.033%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/we_used_this_as_a_texture.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/we_used_this_as_a_texture.png" /&gt;&lt;figcaption&gt;we used this as a texture&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 45.867%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/From_child_safe_to_horror_movie.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/From_child_safe_to_horror_movie.png" /&gt;&lt;figcaption&gt;From child safe to horror movie&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;figure style="width: 54.133%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/Money_in_the_bag_NOW.png"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/Money_in_the_bag_NOW.png" /&gt;&lt;figcaption&gt;Money in the bag NOW&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;figure style="width: 100.000%"&gt;
&lt;a href="https://mrlixm.github.io/static/images/blog/0003/ThisIsFine.gif"&gt;&lt;img src="https://mrlixm.github.io/static/images/blog/0003/ThisIsFine.gif" /&gt;&lt;figcaption&gt;ThisIsFine&lt;/figcaption&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="breakdown"></category><category term="production"></category><category term="memes"></category></entry><entry><title>First Post</title><link href="https://mrlixm.github.io/blog/first_post/" rel="alternate"></link><published>2021-10-10T19:00:00+02:00</published><updated>2021-10-10T19:00:00+02:00</updated><author><name>Liam Collod</name></author><id>tag:mrlixm.github.io,2021-10-10:/blog/first_post/</id><summary type="html">&lt;p&gt;Gotta start somewhere huh ?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;You might want to have a look at my &lt;a href="https://vimeo.com/579603827"&gt;demoreel&lt;/a&gt; instead üëÄ.&lt;/p&gt;
</content><category term="meta"></category></entry></feed>