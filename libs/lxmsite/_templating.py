import dataclasses
import datetime
import logging
import runpy
from pathlib import Path

import jinja2

from lxmsite import SiteConfig
from lxmsite import PageResource
from lxmsite import ShelfResource
from lxmsite import ShelfLibrary
from ._utils import slugify
from ._utils import mkpagerel
from ._utils import mksiterel

LOGGER = logging.getLogger(__name__)


def get_jinja_env(
    site_config: SiteConfig,
    page_rel_url: str,
) -> jinja2.Environment:

    def _mksiteabs_(_path_: str) -> str:
        """
        Convert the given site-relative url to absolute.
        """
        if _path_.startswith("http"):
            # already absolute path
            return _path_
        return f"{site_config.SITE_URL}/{_path_.lstrip('/')}"

    def _mksiterel_(_path_: str, _page_path_=page_rel_url) -> str:
        if _path_.startswith("/"):
            # already relative to site root
            return _path_
        if _path_.startswith("http"):
            # cannot make relative, absolute path
            return _path_
        return mksiterel(_path_, _page_path_)

    def _mkpagerel_(_path_: str, _page_path_=page_rel_url) -> str:
        if _path_.startswith("http"):
            # cannot make relative, absolute path
            return _path_
        return mkpagerel(_path_, _page_path_)

    def _format_link_(_link_: str) -> str:
        """
        Make site cross-linking prettier by removing file format suffix on publish.
        """
        # XXX: this works on GitHub pages !!! no guarantee for other host
        if site_config.PUBLISH_MODE:
            if _link_.endswith("index.html"):
                formatted = _link_.removesuffix("index.html")
                return formatted if formatted else "."
            return _link_.removesuffix(".html")
        return _link_

    jinja_env = jinja2.Environment(
        undefined=jinja2.StrictUndefined,
        loader=jinja2.FileSystemLoader(site_config.TEMPLATES_ROOT),
    )
    jinja_env.filters["slugify"] = slugify
    jinja_env.filters["mksiteabs"] = _mksiteabs_
    jinja_env.filters["mksiterel"] = _mksiterel_
    jinja_env.filters["mkpagerel"] = _mkpagerel_
    jinja_env.filters["prettylink"] = _format_link_
    return jinja_env


@dataclasses.dataclass
class SiteGlobalContext:
    build_time: datetime.datetime
    last_commit: str
    site_files: list[Path]


@dataclasses.dataclass
class TemplateRenderer:
    template: jinja2.Template
    template_path: Path
    jinja_env: jinja2.Environment
    page: PageResource
    site_config: SiteConfig
    context: SiteGlobalContext
    shelf: ShelfResource | None
    shelf_library: ShelfLibrary

    def _run_script(self, script_path: Path) -> str:
        """
        Parse and execute a python script with a 'generate' function that generates a jinja template to render.

        Returns:
            the output of the script, a jinja template as str
        """
        func_signature_template = (
            "def generate(template_renderer: lxmsite.TemplateRenderer) -> str:"
        )

        LOGGER.debug(f">>> running script '{script_path}'")
        script_content = runpy.run_path(str(script_path))

        if "generate" not in script_content:
            raise SyntaxError(
                f"Missing function 'generate' in script '{script_path}'; add:\n"
                f"    {func_signature_template}"
            )
        script_func = script_content["generate"]
        # make a copy
        template_renderer = dataclasses.replace(self)

        LOGGER.debug(
            f">>> running 'generate(template_renderer=<TemplateRenderer {id(self)}>)'"
        )
        try:
            script_template = script_func(template_renderer=template_renderer)
        except TypeError as error:
            if "unexpected keyword argument" in str(error):
                raise TypeError(
                    f"Script's generate() function is missing the declaration of the 'template_renderer' kwarg: \n"
                    f"  {func_signature_template}"
                )
            raise

        if not isinstance(script_template, str):
            raise TypeError(
                f"Unexpected return type for 'generate' function: "
                f"expected str got '{type(script_template)}'"
            )
        return script_template

    def _include_script_output(self, script_name: str) -> str:
        """
        Custom function accessible in templates to inject text generated by a python script.
        """
        template_dir = self.template_path.parent
        script_path = template_dir / script_name
        if not script_path.exists():
            raise FileNotFoundError(
                f"Given script name '{script_name}' does not exists at '{script_path}'"
            )

        script_template = self._run_script(script_path=script_path)
        try:
            script_template = self.jinja_env.from_string(script_template)
        except jinja2.TemplateSyntaxError as error:
            faulty_line = script_template.splitlines()[error.lineno - 1]
            raise jinja2.TemplateSyntaxError(
                message=f"{error} in line '{faulty_line}'",
                lineno=error.lineno,
                name=error.name,
                filename=error.filename,
            ) from error

        new_renderer = dataclasses.replace(self, template=script_template)
        return new_renderer.render()

    def render(self) -> str:
        """
        Render the instance template and return its resolved result.
        """
        attributes = {
            "Page": self.page,
            "Config": self.site_config,
            "Context": self.context,
            "Shelf": self.shelf,
            "ShelfLibrary": self.shelf_library,
            "include_script_output": self._include_script_output,
        }
        content = self.template.render(**attributes)
        return content


def render_page(
    page: PageResource,
    template_name: str,
    site_config: SiteConfig,
    context: SiteGlobalContext,
    shelf: ShelfResource | None,
    shelf_library: ShelfLibrary,
) -> str:
    """

    Args:
        page:
        template_name:
        site_config:
        context:
        shelf:
        shelf_library:

    Returns:

    """
    jinja_env = get_jinja_env(
        site_config=site_config,
        page_rel_url=page.url_path,
    )
    template = jinja_env.get_template(template_name)
    renderer = TemplateRenderer(
        template=template,
        template_path=Path(template.filename),
        jinja_env=jinja_env,
        page=page,
        site_config=site_config,
        context=context,
        shelf=shelf,
        shelf_library=shelf_library,
    )
    return renderer.render()


def render_rss_feed(
    shelf: ShelfResource,
    template_name: str,
    site_config: SiteConfig,
) -> str:
    """
    Generate a rss feed from a shelf.

    Args:
        shelf: shelf the feed is generated from
        template_name: jinja template path relative to template root
        site_config:

    Returns:
        rendered template which can be writen to disk
    """
    jinja_env = get_jinja_env(
        site_config=site_config,
        page_rel_url=shelf.rss_feed_url,
    )
    template = jinja_env.get_template(template_name)
    attributes = {
        "URL_PATH": shelf.rss_feed_url,
        "Config": site_config,
        "Shelf": shelf,
    }
    content = template.render(**attributes)
    return content
